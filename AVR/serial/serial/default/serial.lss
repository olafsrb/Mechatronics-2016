
serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000120  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000006a  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001f9  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000184  00000000  00000000  00000425  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001db  00000000  00000000  000005a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000784  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f3  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000096  00000000  00000000  000008d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000096d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e2       	ldi	r30, 0x20	; 32
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  8e:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART_init>:
return 0;
}

void USART_init(void){

 UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
  96:	10 92 c5 00 	sts	0x00C5, r1
 UBRR0L = (uint8_t)(BAUD_PRESCALLER);
  9a:	87 e6       	ldi	r24, 0x67	; 103
  9c:	80 93 c4 00 	sts	0x00C4, r24
 UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  a0:	88 e1       	ldi	r24, 0x18	; 24
  a2:	80 93 c1 00 	sts	0x00C1, r24
 UCSR0C = (3<<UCSZ00);
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	80 93 c2 00 	sts	0x00C2, r24
}
  ac:	08 95       	ret

000000ae <USART_receive>:

unsigned char USART_receive(void){

 while(!(UCSR0A & (1<<RXC0)));
  ae:	80 91 c0 00 	lds	r24, 0x00C0
  b2:	87 ff       	sbrs	r24, 7
  b4:	fc cf       	rjmp	.-8      	; 0xae <USART_receive>
 return UDR0;
  b6:	80 91 c6 00 	lds	r24, 0x00C6

}
  ba:	08 95       	ret

000000bc <USART_send>:

void USART_send( unsigned char data){
  bc:	98 2f       	mov	r25, r24

 while(!(UCSR0A & (1<<UDRE0)));
  be:	80 91 c0 00 	lds	r24, 0x00C0
  c2:	85 ff       	sbrs	r24, 5
  c4:	fc cf       	rjmp	.-8      	; 0xbe <USART_send+0x2>
 UDR0 = data;
  c6:	90 93 c6 00 	sts	0x00C6, r25

}
  ca:	08 95       	ret

000000cc <USART_putstring>:

void USART_putstring(char* StringPtr){
  cc:	fc 01       	movw	r30, r24
  ce:	07 c0       	rjmp	.+14     	; 0xde <USART_putstring+0x12>

}

void USART_send( unsigned char data){

 while(!(UCSR0A & (1<<UDRE0)));
  d0:	80 91 c0 00 	lds	r24, 0x00C0
  d4:	85 ff       	sbrs	r24, 5
  d6:	fc cf       	rjmp	.-8      	; 0xd0 <USART_putstring+0x4>
 UDR0 = data;
  d8:	90 93 c6 00 	sts	0x00C6, r25

void USART_putstring(char* StringPtr){

while(*StringPtr != 0x00){
 USART_send(*StringPtr);
 StringPtr++;}
  dc:	31 96       	adiw	r30, 0x01	; 1

}

void USART_putstring(char* StringPtr){

while(*StringPtr != 0x00){
  de:	90 81       	ld	r25, Z
  e0:	99 23       	and	r25, r25
  e2:	b1 f7       	brne	.-20     	; 0xd0 <USART_putstring+0x4>
 USART_send(*StringPtr);
 StringPtr++;}

}
  e4:	08 95       	ret

000000e6 <main>:
void USART_send( unsigned char data);
void USART_putstring(char* StringPtr);

char String[]="Hello world!!";    //String[] is in fact an array but when we put the text between the " " symbols the compiler threats it as a String and automatically puts the null termination character in the end of the text

int main(void){
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
return 0;
}

void USART_init(void){

 UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
  ea:	10 92 c5 00 	sts	0x00C5, r1
 UBRR0L = (uint8_t)(BAUD_PRESCALLER);
  ee:	87 e6       	ldi	r24, 0x67	; 103
  f0:	80 93 c4 00 	sts	0x00C4, r24
 UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  f4:	88 e1       	ldi	r24, 0x18	; 24
  f6:	80 93 c1 00 	sts	0x00C1, r24
 UCSR0C = (3<<UCSZ00);
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	80 93 c2 00 	sts	0x00C2, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 100:	c0 e9       	ldi	r28, 0x90	; 144
 102:	d1 e0       	ldi	r29, 0x01	; 1

int main(void){
USART_init();        //Call the USART initialization code

	while(1){        //Infinite loop
 		USART_putstring(String);    //Pass the string to the USART_putstring function and sends it over the serial
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 66 00 	call	0xcc	; 0xcc <USART_putstring>
 10c:	80 e5       	ldi	r24, 0x50	; 80
 10e:	93 ec       	ldi	r25, 0xC3	; 195
 110:	fe 01       	movw	r30, r28
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 116:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 118:	d9 f7       	brne	.-10     	; 0x110 <main+0x2a>
 11a:	f4 cf       	rjmp	.-24     	; 0x104 <main+0x1e>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
