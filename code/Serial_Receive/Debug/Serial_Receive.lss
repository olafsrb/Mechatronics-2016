
Serial_Receive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000102  00800100  00800100  00000284  2**0
                  ALLOC
  2 .stab         00000534  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000751  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
uint8_t rxReadPos = 0;
uint8_t rxWritePos = 0;
char serialBuffer[BUFFERSIZE];

int main()
{
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
	//Init_Uart();

	UBRR0H = (unsigned char)(BRC >> 8); // baudrate = 57600
  98:	e5 ec       	ldi	r30, 0xC5	; 197
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	10 82       	st	Z, r1
	UBRR0L = (unsigned char)BRC;
  9e:	e4 ec       	ldi	r30, 0xC4	; 196
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	87 e6       	ldi	r24, 0x67	; 103
  a4:	80 83       	st	Z, r24

	UCSR0B = (1 << RXEN0) | (1 << RXCIE0);
  a6:	e1 ec       	ldi	r30, 0xC1	; 193
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 e9       	ldi	r24, 0x90	; 144
  ac:	80 83       	st	Z, r24
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  ae:	e2 ec       	ldi	r30, 0xC2	; 194
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	80 83       	st	Z, r24

	DDRB |= (1 << PORTB5);
  b6:	a4 e2       	ldi	r26, 0x24	; 36
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	e4 e2       	ldi	r30, 0x24	; 36
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	8c 93       	st	X, r24

	sei();
  c4:	78 94       	sei

	while (1)
	{

		receiveMessage();
  c6:	0e 94 9b 00 	call	0x136	; 0x136 <receiveMessage>



//		char c = getChar();

		if(serialBuffer == 'a')
  ca:	82 e8       	ldi	r24, 0x82	; 130
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	81 36       	cpi	r24, 0x61	; 97
  d0:	91 05       	cpc	r25, r1
  d2:	41 f4       	brne	.+16     	; 0xe4 <main+0x54>
		{
			PORTB |= (1 << PORTB5);
  d4:	a5 e2       	ldi	r26, 0x25	; 37
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	e5 e2       	ldi	r30, 0x25	; 37
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	8c 93       	st	X, r24
  e2:	f1 cf       	rjmp	.-30     	; 0xc6 <main+0x36>
		}
		else
		{
			PORTB = 0;
  e4:	e5 e2       	ldi	r30, 0x25	; 37
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	10 82       	st	Z, r1
  ea:	ed cf       	rjmp	.-38     	; 0xc6 <main+0x36>

000000ec <getChar>:
	}
	return 0;
}

char getChar(void)
{
  ec:	df 93       	push	r29
  ee:	cf 93       	push	r28
  f0:	0f 92       	push	r0
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
	char ret = '\0';
  f6:	19 82       	std	Y+1, r1	; 0x01
	if(rxReadPos != rxWritePos)
  f8:	90 91 00 01 	lds	r25, 0x0100
  fc:	80 91 01 01 	lds	r24, 0x0101
 100:	98 17       	cp	r25, r24
 102:	a1 f0       	breq	.+40     	; 0x12c <getChar+0x40>
	{
		ret = rxBuffer[rxReadPos];
 104:	80 91 00 01 	lds	r24, 0x0100
 108:	88 2f       	mov	r24, r24
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	fc 01       	movw	r30, r24
 10e:	ee 5f       	subi	r30, 0xFE	; 254
 110:	fe 4f       	sbci	r31, 0xFE	; 254
 112:	80 81       	ld	r24, Z
 114:	89 83       	std	Y+1, r24	; 0x01
		rxReadPos++;
 116:	80 91 00 01 	lds	r24, 0x0100
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	80 93 00 01 	sts	0x0100, r24

		if(rxReadPos >= BUFFERSIZE)
 120:	80 91 00 01 	lds	r24, 0x0100
 124:	88 23       	and	r24, r24
 126:	14 f4       	brge	.+4      	; 0x12c <getChar+0x40>
		{
			rxReadPos = 0;
 128:	10 92 00 01 	sts	0x0100, r1
		}
	}
	return ret;
 12c:	89 81       	ldd	r24, Y+1	; 0x01
}
 12e:	0f 90       	pop	r0
 130:	cf 91       	pop	r28
 132:	df 91       	pop	r29
 134:	08 95       	ret

00000136 <receiveMessage>:

void receiveMessage(void) {
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	df 93       	push	r29
 13c:	cf 93       	push	r28
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	0a c0       	rjmp	.+20     	; 0x158 <receiveMessage+0x22>
	while(UCSR0A &= ~(1 << UDRE0)){
		serialBuffer[rxReadPos] = getChar();
 144:	80 91 00 01 	lds	r24, 0x0100
 148:	08 2f       	mov	r16, r24
 14a:	10 e0       	ldi	r17, 0x00	; 0
 14c:	0e 94 76 00 	call	0xec	; 0xec <getChar>
 150:	f8 01       	movw	r30, r16
 152:	ee 57       	subi	r30, 0x7E	; 126
 154:	fe 4f       	sbci	r31, 0xFE	; 254
 156:	80 83       	st	Z, r24
	}
	return ret;
}

void receiveMessage(void) {
	while(UCSR0A &= ~(1 << UDRE0)){
 158:	a0 ec       	ldi	r26, 0xC0	; 192
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	e0 ec       	ldi	r30, 0xC0	; 192
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	8f 7d       	andi	r24, 0xDF	; 223
 164:	8c 93       	st	X, r24
 166:	8c 91       	ld	r24, X
 168:	88 23       	and	r24, r24
 16a:	61 f7       	brne	.-40     	; 0x144 <receiveMessage+0xe>
		serialBuffer[rxReadPos] = getChar();
	}
//	for(uint8_t i = 0; UCSR0A &= ~(1 << UDRE0); i++) {
//		serialBuffer[i] = getChar();
//	}
}
 16c:	cf 91       	pop	r28
 16e:	df 91       	pop	r29
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	08 95       	ret

00000176 <peekChar>:

char peekChar(void)
{
 176:	df 93       	push	r29
 178:	cf 93       	push	r28
 17a:	0f 92       	push	r0
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
	char ret = '0';
 180:	80 e3       	ldi	r24, 0x30	; 48
 182:	89 83       	std	Y+1, r24	; 0x01
	if(rxReadPos != rxWritePos)
 184:	90 91 00 01 	lds	r25, 0x0100
 188:	80 91 01 01 	lds	r24, 0x0101
 18c:	98 17       	cp	r25, r24
 18e:	49 f0       	breq	.+18     	; 0x1a2 <peekChar+0x2c>
	{
		ret = rxBuffer[rxReadPos];
 190:	80 91 00 01 	lds	r24, 0x0100
 194:	88 2f       	mov	r24, r24
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	fc 01       	movw	r30, r24
 19a:	ee 5f       	subi	r30, 0xFE	; 254
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	80 81       	ld	r24, Z
 1a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
}
 1a4:	0f 90       	pop	r0
 1a6:	cf 91       	pop	r28
 1a8:	df 91       	pop	r29
 1aa:	08 95       	ret

000001ac <__vector_18>:

ISR(USART_RX_vect)
{
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
 1c0:	df 93       	push	r29
 1c2:	cf 93       	push	r28
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
	rxBuffer[rxWritePos] = UDR0;
 1c8:	80 91 01 01 	lds	r24, 0x0101
 1cc:	88 2f       	mov	r24, r24
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	e6 ec       	ldi	r30, 0xC6	; 198
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	20 81       	ld	r18, Z
 1d6:	fc 01       	movw	r30, r24
 1d8:	ee 5f       	subi	r30, 0xFE	; 254
 1da:	fe 4f       	sbci	r31, 0xFE	; 254
 1dc:	20 83       	st	Z, r18
	rxWritePos++;
 1de:	80 91 01 01 	lds	r24, 0x0101
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
 1e4:	80 93 01 01 	sts	0x0101, r24

	if(rxReadPos >= BUFFERSIZE)
 1e8:	80 91 00 01 	lds	r24, 0x0100
 1ec:	88 23       	and	r24, r24
 1ee:	14 f4       	brge	.+4      	; 0x1f4 <__vector_18+0x48>
	{
		rxReadPos = 0;
 1f0:	10 92 00 01 	sts	0x0100, r1
	}

}
 1f4:	cf 91       	pop	r28
 1f6:	df 91       	pop	r29
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
