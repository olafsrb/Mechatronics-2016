
Serial_Transmitt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000126  00800100  00000c3e  00000cd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  00800226  00800226  00000df8  2**0
                  ALLOC
  3 .stab         000009cc  00000000  00000000  00000df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000086f  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00002033  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000104  00000000  00000000  000020f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000010ce  00000000  00000000  000021f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000009db  00000000  00000000  000032c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000897  00000000  00000000  00003ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  00004538  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000247  00000000  00000000  000045f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000408  00000000  00000000  0000483f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3a       	cpi	r26, 0xAA	; 170
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8b 04 	call	0x916	; 0x916 <main>
  9e:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__divsf3>:
  a6:	a8 e1       	ldi	r26, 0x18	; 24
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	e9 e5       	ldi	r30, 0x59	; 89
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__prologue_saves__+0x10>
  b2:	69 83       	std	Y+1, r22	; 0x01
  b4:	7a 83       	std	Y+2, r23	; 0x02
  b6:	8b 83       	std	Y+3, r24	; 0x03
  b8:	9c 83       	std	Y+4, r25	; 0x04
  ba:	2d 83       	std	Y+5, r18	; 0x05
  bc:	3e 83       	std	Y+6, r19	; 0x06
  be:	4f 83       	std	Y+7, r20	; 0x07
  c0:	58 87       	std	Y+8, r21	; 0x08
  c2:	b9 e0       	ldi	r27, 0x09	; 9
  c4:	eb 2e       	mov	r14, r27
  c6:	f1 2c       	mov	r15, r1
  c8:	ec 0e       	add	r14, r28
  ca:	fd 1e       	adc	r15, r29
  cc:	ce 01       	movw	r24, r28
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	b7 01       	movw	r22, r14
  d2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__unpack_f>
  d6:	8e 01       	movw	r16, r28
  d8:	0f 5e       	subi	r16, 0xEF	; 239
  da:	1f 4f       	sbci	r17, 0xFF	; 255
  dc:	ce 01       	movw	r24, r28
  de:	05 96       	adiw	r24, 0x05	; 5
  e0:	b8 01       	movw	r22, r16
  e2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__unpack_f>
  e6:	29 85       	ldd	r18, Y+9	; 0x09
  e8:	22 30       	cpi	r18, 0x02	; 2
  ea:	08 f4       	brcc	.+2      	; 0xee <__divsf3+0x48>
  ec:	7e c0       	rjmp	.+252    	; 0x1ea <__divsf3+0x144>
  ee:	39 89       	ldd	r19, Y+17	; 0x11
  f0:	32 30       	cpi	r19, 0x02	; 2
  f2:	10 f4       	brcc	.+4      	; 0xf8 <__divsf3+0x52>
  f4:	b8 01       	movw	r22, r16
  f6:	7c c0       	rjmp	.+248    	; 0x1f0 <__divsf3+0x14a>
  f8:	8a 85       	ldd	r24, Y+10	; 0x0a
  fa:	9a 89       	ldd	r25, Y+18	; 0x12
  fc:	89 27       	eor	r24, r25
  fe:	8a 87       	std	Y+10, r24	; 0x0a
 100:	24 30       	cpi	r18, 0x04	; 4
 102:	11 f0       	breq	.+4      	; 0x108 <__divsf3+0x62>
 104:	22 30       	cpi	r18, 0x02	; 2
 106:	31 f4       	brne	.+12     	; 0x114 <__divsf3+0x6e>
 108:	23 17       	cp	r18, r19
 10a:	09 f0       	breq	.+2      	; 0x10e <__divsf3+0x68>
 10c:	6e c0       	rjmp	.+220    	; 0x1ea <__divsf3+0x144>
 10e:	63 e0       	ldi	r22, 0x03	; 3
 110:	71 e0       	ldi	r23, 0x01	; 1
 112:	6e c0       	rjmp	.+220    	; 0x1f0 <__divsf3+0x14a>
 114:	34 30       	cpi	r19, 0x04	; 4
 116:	39 f4       	brne	.+14     	; 0x126 <__divsf3+0x80>
 118:	1d 86       	std	Y+13, r1	; 0x0d
 11a:	1e 86       	std	Y+14, r1	; 0x0e
 11c:	1f 86       	std	Y+15, r1	; 0x0f
 11e:	18 8a       	std	Y+16, r1	; 0x10
 120:	1c 86       	std	Y+12, r1	; 0x0c
 122:	1b 86       	std	Y+11, r1	; 0x0b
 124:	04 c0       	rjmp	.+8      	; 0x12e <__divsf3+0x88>
 126:	32 30       	cpi	r19, 0x02	; 2
 128:	21 f4       	brne	.+8      	; 0x132 <__divsf3+0x8c>
 12a:	84 e0       	ldi	r24, 0x04	; 4
 12c:	89 87       	std	Y+9, r24	; 0x09
 12e:	b7 01       	movw	r22, r14
 130:	5f c0       	rjmp	.+190    	; 0x1f0 <__divsf3+0x14a>
 132:	2b 85       	ldd	r18, Y+11	; 0x0b
 134:	3c 85       	ldd	r19, Y+12	; 0x0c
 136:	8b 89       	ldd	r24, Y+19	; 0x13
 138:	9c 89       	ldd	r25, Y+20	; 0x14
 13a:	28 1b       	sub	r18, r24
 13c:	39 0b       	sbc	r19, r25
 13e:	3c 87       	std	Y+12, r19	; 0x0c
 140:	2b 87       	std	Y+11, r18	; 0x0b
 142:	ed 84       	ldd	r14, Y+13	; 0x0d
 144:	fe 84       	ldd	r15, Y+14	; 0x0e
 146:	0f 85       	ldd	r16, Y+15	; 0x0f
 148:	18 89       	ldd	r17, Y+16	; 0x10
 14a:	ad 88       	ldd	r10, Y+21	; 0x15
 14c:	be 88       	ldd	r11, Y+22	; 0x16
 14e:	cf 88       	ldd	r12, Y+23	; 0x17
 150:	d8 8c       	ldd	r13, Y+24	; 0x18
 152:	ea 14       	cp	r14, r10
 154:	fb 04       	cpc	r15, r11
 156:	0c 05       	cpc	r16, r12
 158:	1d 05       	cpc	r17, r13
 15a:	40 f4       	brcc	.+16     	; 0x16c <__divsf3+0xc6>
 15c:	ee 0c       	add	r14, r14
 15e:	ff 1c       	adc	r15, r15
 160:	00 1f       	adc	r16, r16
 162:	11 1f       	adc	r17, r17
 164:	21 50       	subi	r18, 0x01	; 1
 166:	30 40       	sbci	r19, 0x00	; 0
 168:	3c 87       	std	Y+12, r19	; 0x0c
 16a:	2b 87       	std	Y+11, r18	; 0x0b
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	50 e0       	ldi	r21, 0x00	; 0
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	a0 e0       	ldi	r26, 0x00	; 0
 17a:	b0 e4       	ldi	r27, 0x40	; 64
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	ea 14       	cp	r14, r10
 182:	fb 04       	cpc	r15, r11
 184:	0c 05       	cpc	r16, r12
 186:	1d 05       	cpc	r17, r13
 188:	40 f0       	brcs	.+16     	; 0x19a <__divsf3+0xf4>
 18a:	28 2b       	or	r18, r24
 18c:	39 2b       	or	r19, r25
 18e:	4a 2b       	or	r20, r26
 190:	5b 2b       	or	r21, r27
 192:	ea 18       	sub	r14, r10
 194:	fb 08       	sbc	r15, r11
 196:	0c 09       	sbc	r16, r12
 198:	1d 09       	sbc	r17, r13
 19a:	b6 95       	lsr	r27
 19c:	a7 95       	ror	r26
 19e:	97 95       	ror	r25
 1a0:	87 95       	ror	r24
 1a2:	ee 0c       	add	r14, r14
 1a4:	ff 1c       	adc	r15, r15
 1a6:	00 1f       	adc	r16, r16
 1a8:	11 1f       	adc	r17, r17
 1aa:	6f 5f       	subi	r22, 0xFF	; 255
 1ac:	7f 4f       	sbci	r23, 0xFF	; 255
 1ae:	6f 31       	cpi	r22, 0x1F	; 31
 1b0:	71 05       	cpc	r23, r1
 1b2:	31 f7       	brne	.-52     	; 0x180 <__divsf3+0xda>
 1b4:	da 01       	movw	r26, r20
 1b6:	c9 01       	movw	r24, r18
 1b8:	8f 77       	andi	r24, 0x7F	; 127
 1ba:	90 70       	andi	r25, 0x00	; 0
 1bc:	a0 70       	andi	r26, 0x00	; 0
 1be:	b0 70       	andi	r27, 0x00	; 0
 1c0:	80 34       	cpi	r24, 0x40	; 64
 1c2:	91 05       	cpc	r25, r1
 1c4:	a1 05       	cpc	r26, r1
 1c6:	b1 05       	cpc	r27, r1
 1c8:	61 f4       	brne	.+24     	; 0x1e2 <__divsf3+0x13c>
 1ca:	27 fd       	sbrc	r18, 7
 1cc:	0a c0       	rjmp	.+20     	; 0x1e2 <__divsf3+0x13c>
 1ce:	e1 14       	cp	r14, r1
 1d0:	f1 04       	cpc	r15, r1
 1d2:	01 05       	cpc	r16, r1
 1d4:	11 05       	cpc	r17, r1
 1d6:	29 f0       	breq	.+10     	; 0x1e2 <__divsf3+0x13c>
 1d8:	20 5c       	subi	r18, 0xC0	; 192
 1da:	3f 4f       	sbci	r19, 0xFF	; 255
 1dc:	4f 4f       	sbci	r20, 0xFF	; 255
 1de:	5f 4f       	sbci	r21, 0xFF	; 255
 1e0:	20 78       	andi	r18, 0x80	; 128
 1e2:	2d 87       	std	Y+13, r18	; 0x0d
 1e4:	3e 87       	std	Y+14, r19	; 0x0e
 1e6:	4f 87       	std	Y+15, r20	; 0x0f
 1e8:	58 8b       	std	Y+16, r21	; 0x10
 1ea:	be 01       	movw	r22, r28
 1ec:	67 5f       	subi	r22, 0xF7	; 247
 1ee:	7f 4f       	sbci	r23, 0xFF	; 255
 1f0:	cb 01       	movw	r24, r22
 1f2:	0e 94 1b 02 	call	0x436	; 0x436 <__pack_f>
 1f6:	68 96       	adiw	r28, 0x18	; 24
 1f8:	ea e0       	ldi	r30, 0x0A	; 10
 1fa:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__epilogue_restores__+0x10>

000001fe <__fixsfsi>:
 1fe:	ac e0       	ldi	r26, 0x0C	; 12
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	e5 e0       	ldi	r30, 0x05	; 5
 204:	f1 e0       	ldi	r31, 0x01	; 1
 206:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__prologue_saves__+0x20>
 20a:	69 83       	std	Y+1, r22	; 0x01
 20c:	7a 83       	std	Y+2, r23	; 0x02
 20e:	8b 83       	std	Y+3, r24	; 0x03
 210:	9c 83       	std	Y+4, r25	; 0x04
 212:	ce 01       	movw	r24, r28
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	be 01       	movw	r22, r28
 218:	6b 5f       	subi	r22, 0xFB	; 251
 21a:	7f 4f       	sbci	r23, 0xFF	; 255
 21c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__unpack_f>
 220:	8d 81       	ldd	r24, Y+5	; 0x05
 222:	82 30       	cpi	r24, 0x02	; 2
 224:	61 f1       	breq	.+88     	; 0x27e <__fixsfsi+0x80>
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	50 f1       	brcs	.+84     	; 0x27e <__fixsfsi+0x80>
 22a:	84 30       	cpi	r24, 0x04	; 4
 22c:	21 f4       	brne	.+8      	; 0x236 <__fixsfsi+0x38>
 22e:	8e 81       	ldd	r24, Y+6	; 0x06
 230:	88 23       	and	r24, r24
 232:	51 f1       	breq	.+84     	; 0x288 <__fixsfsi+0x8a>
 234:	2e c0       	rjmp	.+92     	; 0x292 <__fixsfsi+0x94>
 236:	2f 81       	ldd	r18, Y+7	; 0x07
 238:	38 85       	ldd	r19, Y+8	; 0x08
 23a:	37 fd       	sbrc	r19, 7
 23c:	20 c0       	rjmp	.+64     	; 0x27e <__fixsfsi+0x80>
 23e:	6e 81       	ldd	r22, Y+6	; 0x06
 240:	2f 31       	cpi	r18, 0x1F	; 31
 242:	31 05       	cpc	r19, r1
 244:	1c f0       	brlt	.+6      	; 0x24c <__fixsfsi+0x4e>
 246:	66 23       	and	r22, r22
 248:	f9 f0       	breq	.+62     	; 0x288 <__fixsfsi+0x8a>
 24a:	23 c0       	rjmp	.+70     	; 0x292 <__fixsfsi+0x94>
 24c:	8e e1       	ldi	r24, 0x1E	; 30
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	82 1b       	sub	r24, r18
 252:	93 0b       	sbc	r25, r19
 254:	29 85       	ldd	r18, Y+9	; 0x09
 256:	3a 85       	ldd	r19, Y+10	; 0x0a
 258:	4b 85       	ldd	r20, Y+11	; 0x0b
 25a:	5c 85       	ldd	r21, Y+12	; 0x0c
 25c:	04 c0       	rjmp	.+8      	; 0x266 <__fixsfsi+0x68>
 25e:	56 95       	lsr	r21
 260:	47 95       	ror	r20
 262:	37 95       	ror	r19
 264:	27 95       	ror	r18
 266:	8a 95       	dec	r24
 268:	d2 f7       	brpl	.-12     	; 0x25e <__fixsfsi+0x60>
 26a:	66 23       	and	r22, r22
 26c:	b1 f0       	breq	.+44     	; 0x29a <__fixsfsi+0x9c>
 26e:	50 95       	com	r21
 270:	40 95       	com	r20
 272:	30 95       	com	r19
 274:	21 95       	neg	r18
 276:	3f 4f       	sbci	r19, 0xFF	; 255
 278:	4f 4f       	sbci	r20, 0xFF	; 255
 27a:	5f 4f       	sbci	r21, 0xFF	; 255
 27c:	0e c0       	rjmp	.+28     	; 0x29a <__fixsfsi+0x9c>
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	09 c0       	rjmp	.+18     	; 0x29a <__fixsfsi+0x9c>
 288:	2f ef       	ldi	r18, 0xFF	; 255
 28a:	3f ef       	ldi	r19, 0xFF	; 255
 28c:	4f ef       	ldi	r20, 0xFF	; 255
 28e:	5f e7       	ldi	r21, 0x7F	; 127
 290:	04 c0       	rjmp	.+8      	; 0x29a <__fixsfsi+0x9c>
 292:	20 e0       	ldi	r18, 0x00	; 0
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	50 e8       	ldi	r21, 0x80	; 128
 29a:	b9 01       	movw	r22, r18
 29c:	ca 01       	movw	r24, r20
 29e:	2c 96       	adiw	r28, 0x0c	; 12
 2a0:	e2 e0       	ldi	r30, 0x02	; 2
 2a2:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__epilogue_restores__+0x20>

000002a6 <__floatunsisf>:
 2a6:	a8 e0       	ldi	r26, 0x08	; 8
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	e9 e5       	ldi	r30, 0x59	; 89
 2ac:	f1 e0       	ldi	r31, 0x01	; 1
 2ae:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__prologue_saves__+0x10>
 2b2:	7b 01       	movw	r14, r22
 2b4:	8c 01       	movw	r16, r24
 2b6:	61 15       	cp	r22, r1
 2b8:	71 05       	cpc	r23, r1
 2ba:	81 05       	cpc	r24, r1
 2bc:	91 05       	cpc	r25, r1
 2be:	19 f4       	brne	.+6      	; 0x2c6 <__floatunsisf+0x20>
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	89 83       	std	Y+1, r24	; 0x01
 2c4:	60 c0       	rjmp	.+192    	; 0x386 <__floatunsisf+0xe0>
 2c6:	83 e0       	ldi	r24, 0x03	; 3
 2c8:	89 83       	std	Y+1, r24	; 0x01
 2ca:	8e e1       	ldi	r24, 0x1E	; 30
 2cc:	c8 2e       	mov	r12, r24
 2ce:	d1 2c       	mov	r13, r1
 2d0:	dc 82       	std	Y+4, r13	; 0x04
 2d2:	cb 82       	std	Y+3, r12	; 0x03
 2d4:	ed 82       	std	Y+5, r14	; 0x05
 2d6:	fe 82       	std	Y+6, r15	; 0x06
 2d8:	0f 83       	std	Y+7, r16	; 0x07
 2da:	18 87       	std	Y+8, r17	; 0x08
 2dc:	c8 01       	movw	r24, r16
 2de:	b7 01       	movw	r22, r14
 2e0:	0e 94 cc 01 	call	0x398	; 0x398 <__clzsi2>
 2e4:	fc 01       	movw	r30, r24
 2e6:	31 97       	sbiw	r30, 0x01	; 1
 2e8:	f7 ff       	sbrs	r31, 7
 2ea:	3b c0       	rjmp	.+118    	; 0x362 <__floatunsisf+0xbc>
 2ec:	22 27       	eor	r18, r18
 2ee:	33 27       	eor	r19, r19
 2f0:	2e 1b       	sub	r18, r30
 2f2:	3f 0b       	sbc	r19, r31
 2f4:	57 01       	movw	r10, r14
 2f6:	68 01       	movw	r12, r16
 2f8:	02 2e       	mov	r0, r18
 2fa:	04 c0       	rjmp	.+8      	; 0x304 <__floatunsisf+0x5e>
 2fc:	d6 94       	lsr	r13
 2fe:	c7 94       	ror	r12
 300:	b7 94       	ror	r11
 302:	a7 94       	ror	r10
 304:	0a 94       	dec	r0
 306:	d2 f7       	brpl	.-12     	; 0x2fc <__floatunsisf+0x56>
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	a0 e0       	ldi	r26, 0x00	; 0
 316:	b0 e0       	ldi	r27, 0x00	; 0
 318:	04 c0       	rjmp	.+8      	; 0x322 <__floatunsisf+0x7c>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	aa 1f       	adc	r26, r26
 320:	bb 1f       	adc	r27, r27
 322:	2a 95       	dec	r18
 324:	d2 f7       	brpl	.-12     	; 0x31a <__floatunsisf+0x74>
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	a1 09       	sbc	r26, r1
 32a:	b1 09       	sbc	r27, r1
 32c:	8e 21       	and	r24, r14
 32e:	9f 21       	and	r25, r15
 330:	a0 23       	and	r26, r16
 332:	b1 23       	and	r27, r17
 334:	00 97       	sbiw	r24, 0x00	; 0
 336:	a1 05       	cpc	r26, r1
 338:	b1 05       	cpc	r27, r1
 33a:	21 f0       	breq	.+8      	; 0x344 <__floatunsisf+0x9e>
 33c:	41 e0       	ldi	r20, 0x01	; 1
 33e:	50 e0       	ldi	r21, 0x00	; 0
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	4a 29       	or	r20, r10
 346:	5b 29       	or	r21, r11
 348:	6c 29       	or	r22, r12
 34a:	7d 29       	or	r23, r13
 34c:	4d 83       	std	Y+5, r20	; 0x05
 34e:	5e 83       	std	Y+6, r21	; 0x06
 350:	6f 83       	std	Y+7, r22	; 0x07
 352:	78 87       	std	Y+8, r23	; 0x08
 354:	8e e1       	ldi	r24, 0x1E	; 30
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	8e 1b       	sub	r24, r30
 35a:	9f 0b       	sbc	r25, r31
 35c:	9c 83       	std	Y+4, r25	; 0x04
 35e:	8b 83       	std	Y+3, r24	; 0x03
 360:	12 c0       	rjmp	.+36     	; 0x386 <__floatunsisf+0xe0>
 362:	30 97       	sbiw	r30, 0x00	; 0
 364:	81 f0       	breq	.+32     	; 0x386 <__floatunsisf+0xe0>
 366:	0e 2e       	mov	r0, r30
 368:	04 c0       	rjmp	.+8      	; 0x372 <__floatunsisf+0xcc>
 36a:	ee 0c       	add	r14, r14
 36c:	ff 1c       	adc	r15, r15
 36e:	00 1f       	adc	r16, r16
 370:	11 1f       	adc	r17, r17
 372:	0a 94       	dec	r0
 374:	d2 f7       	brpl	.-12     	; 0x36a <__floatunsisf+0xc4>
 376:	ed 82       	std	Y+5, r14	; 0x05
 378:	fe 82       	std	Y+6, r15	; 0x06
 37a:	0f 83       	std	Y+7, r16	; 0x07
 37c:	18 87       	std	Y+8, r17	; 0x08
 37e:	ce 1a       	sub	r12, r30
 380:	df 0a       	sbc	r13, r31
 382:	dc 82       	std	Y+4, r13	; 0x04
 384:	cb 82       	std	Y+3, r12	; 0x03
 386:	1a 82       	std	Y+2, r1	; 0x02
 388:	ce 01       	movw	r24, r28
 38a:	01 96       	adiw	r24, 0x01	; 1
 38c:	0e 94 1b 02 	call	0x436	; 0x436 <__pack_f>
 390:	28 96       	adiw	r28, 0x08	; 8
 392:	ea e0       	ldi	r30, 0x0A	; 10
 394:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__epilogue_restores__+0x10>

00000398 <__clzsi2>:
 398:	ef 92       	push	r14
 39a:	ff 92       	push	r15
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
 3a0:	7b 01       	movw	r14, r22
 3a2:	8c 01       	movw	r16, r24
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	e8 16       	cp	r14, r24
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	f8 06       	cpc	r15, r24
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	08 07       	cpc	r16, r24
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	18 07       	cpc	r17, r24
 3b4:	88 f4       	brcc	.+34     	; 0x3d8 <__clzsi2+0x40>
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	e8 16       	cp	r14, r24
 3ba:	f1 04       	cpc	r15, r1
 3bc:	01 05       	cpc	r16, r1
 3be:	11 05       	cpc	r17, r1
 3c0:	31 f0       	breq	.+12     	; 0x3ce <__clzsi2+0x36>
 3c2:	28 f0       	brcs	.+10     	; 0x3ce <__clzsi2+0x36>
 3c4:	88 e0       	ldi	r24, 0x08	; 8
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	a0 e0       	ldi	r26, 0x00	; 0
 3ca:	b0 e0       	ldi	r27, 0x00	; 0
 3cc:	17 c0       	rjmp	.+46     	; 0x3fc <__clzsi2+0x64>
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	a0 e0       	ldi	r26, 0x00	; 0
 3d4:	b0 e0       	ldi	r27, 0x00	; 0
 3d6:	12 c0       	rjmp	.+36     	; 0x3fc <__clzsi2+0x64>
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	e8 16       	cp	r14, r24
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	f8 06       	cpc	r15, r24
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	08 07       	cpc	r16, r24
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	18 07       	cpc	r17, r24
 3e8:	28 f0       	brcs	.+10     	; 0x3f4 <__clzsi2+0x5c>
 3ea:	88 e1       	ldi	r24, 0x18	; 24
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	a0 e0       	ldi	r26, 0x00	; 0
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	04 c0       	rjmp	.+8      	; 0x3fc <__clzsi2+0x64>
 3f4:	80 e1       	ldi	r24, 0x10	; 16
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	a0 e0       	ldi	r26, 0x00	; 0
 3fa:	b0 e0       	ldi	r27, 0x00	; 0
 3fc:	20 e2       	ldi	r18, 0x20	; 32
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	28 1b       	sub	r18, r24
 406:	39 0b       	sbc	r19, r25
 408:	4a 0b       	sbc	r20, r26
 40a:	5b 0b       	sbc	r21, r27
 40c:	04 c0       	rjmp	.+8      	; 0x416 <__clzsi2+0x7e>
 40e:	16 95       	lsr	r17
 410:	07 95       	ror	r16
 412:	f7 94       	ror	r15
 414:	e7 94       	ror	r14
 416:	8a 95       	dec	r24
 418:	d2 f7       	brpl	.-12     	; 0x40e <__clzsi2+0x76>
 41a:	f7 01       	movw	r30, r14
 41c:	e5 5f       	subi	r30, 0xF5	; 245
 41e:	fe 4f       	sbci	r31, 0xFE	; 254
 420:	80 81       	ld	r24, Z
 422:	28 1b       	sub	r18, r24
 424:	31 09       	sbc	r19, r1
 426:	41 09       	sbc	r20, r1
 428:	51 09       	sbc	r21, r1
 42a:	c9 01       	movw	r24, r18
 42c:	1f 91       	pop	r17
 42e:	0f 91       	pop	r16
 430:	ff 90       	pop	r15
 432:	ef 90       	pop	r14
 434:	08 95       	ret

00000436 <__pack_f>:
 436:	df 92       	push	r13
 438:	ef 92       	push	r14
 43a:	ff 92       	push	r15
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
 440:	fc 01       	movw	r30, r24
 442:	e4 80       	ldd	r14, Z+4	; 0x04
 444:	f5 80       	ldd	r15, Z+5	; 0x05
 446:	06 81       	ldd	r16, Z+6	; 0x06
 448:	17 81       	ldd	r17, Z+7	; 0x07
 44a:	d1 80       	ldd	r13, Z+1	; 0x01
 44c:	80 81       	ld	r24, Z
 44e:	82 30       	cpi	r24, 0x02	; 2
 450:	48 f4       	brcc	.+18     	; 0x464 <__pack_f+0x2e>
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	a0 e1       	ldi	r26, 0x10	; 16
 458:	b0 e0       	ldi	r27, 0x00	; 0
 45a:	e8 2a       	or	r14, r24
 45c:	f9 2a       	or	r15, r25
 45e:	0a 2b       	or	r16, r26
 460:	1b 2b       	or	r17, r27
 462:	a5 c0       	rjmp	.+330    	; 0x5ae <__pack_f+0x178>
 464:	84 30       	cpi	r24, 0x04	; 4
 466:	09 f4       	brne	.+2      	; 0x46a <__pack_f+0x34>
 468:	9f c0       	rjmp	.+318    	; 0x5a8 <__pack_f+0x172>
 46a:	82 30       	cpi	r24, 0x02	; 2
 46c:	21 f4       	brne	.+8      	; 0x476 <__pack_f+0x40>
 46e:	ee 24       	eor	r14, r14
 470:	ff 24       	eor	r15, r15
 472:	87 01       	movw	r16, r14
 474:	05 c0       	rjmp	.+10     	; 0x480 <__pack_f+0x4a>
 476:	e1 14       	cp	r14, r1
 478:	f1 04       	cpc	r15, r1
 47a:	01 05       	cpc	r16, r1
 47c:	11 05       	cpc	r17, r1
 47e:	19 f4       	brne	.+6      	; 0x486 <__pack_f+0x50>
 480:	e0 e0       	ldi	r30, 0x00	; 0
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	96 c0       	rjmp	.+300    	; 0x5b2 <__pack_f+0x17c>
 486:	62 81       	ldd	r22, Z+2	; 0x02
 488:	73 81       	ldd	r23, Z+3	; 0x03
 48a:	9f ef       	ldi	r25, 0xFF	; 255
 48c:	62 38       	cpi	r22, 0x82	; 130
 48e:	79 07       	cpc	r23, r25
 490:	0c f0       	brlt	.+2      	; 0x494 <__pack_f+0x5e>
 492:	5b c0       	rjmp	.+182    	; 0x54a <__pack_f+0x114>
 494:	22 e8       	ldi	r18, 0x82	; 130
 496:	3f ef       	ldi	r19, 0xFF	; 255
 498:	26 1b       	sub	r18, r22
 49a:	37 0b       	sbc	r19, r23
 49c:	2a 31       	cpi	r18, 0x1A	; 26
 49e:	31 05       	cpc	r19, r1
 4a0:	2c f0       	brlt	.+10     	; 0x4ac <__pack_f+0x76>
 4a2:	20 e0       	ldi	r18, 0x00	; 0
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	2a c0       	rjmp	.+84     	; 0x500 <__pack_f+0xca>
 4ac:	b8 01       	movw	r22, r16
 4ae:	a7 01       	movw	r20, r14
 4b0:	02 2e       	mov	r0, r18
 4b2:	04 c0       	rjmp	.+8      	; 0x4bc <__pack_f+0x86>
 4b4:	76 95       	lsr	r23
 4b6:	67 95       	ror	r22
 4b8:	57 95       	ror	r21
 4ba:	47 95       	ror	r20
 4bc:	0a 94       	dec	r0
 4be:	d2 f7       	brpl	.-12     	; 0x4b4 <__pack_f+0x7e>
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	a0 e0       	ldi	r26, 0x00	; 0
 4c6:	b0 e0       	ldi	r27, 0x00	; 0
 4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <__pack_f+0x9c>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	aa 1f       	adc	r26, r26
 4d0:	bb 1f       	adc	r27, r27
 4d2:	2a 95       	dec	r18
 4d4:	d2 f7       	brpl	.-12     	; 0x4ca <__pack_f+0x94>
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	a1 09       	sbc	r26, r1
 4da:	b1 09       	sbc	r27, r1
 4dc:	8e 21       	and	r24, r14
 4de:	9f 21       	and	r25, r15
 4e0:	a0 23       	and	r26, r16
 4e2:	b1 23       	and	r27, r17
 4e4:	00 97       	sbiw	r24, 0x00	; 0
 4e6:	a1 05       	cpc	r26, r1
 4e8:	b1 05       	cpc	r27, r1
 4ea:	21 f0       	breq	.+8      	; 0x4f4 <__pack_f+0xbe>
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	a0 e0       	ldi	r26, 0x00	; 0
 4f2:	b0 e0       	ldi	r27, 0x00	; 0
 4f4:	9a 01       	movw	r18, r20
 4f6:	ab 01       	movw	r20, r22
 4f8:	28 2b       	or	r18, r24
 4fa:	39 2b       	or	r19, r25
 4fc:	4a 2b       	or	r20, r26
 4fe:	5b 2b       	or	r21, r27
 500:	da 01       	movw	r26, r20
 502:	c9 01       	movw	r24, r18
 504:	8f 77       	andi	r24, 0x7F	; 127
 506:	90 70       	andi	r25, 0x00	; 0
 508:	a0 70       	andi	r26, 0x00	; 0
 50a:	b0 70       	andi	r27, 0x00	; 0
 50c:	80 34       	cpi	r24, 0x40	; 64
 50e:	91 05       	cpc	r25, r1
 510:	a1 05       	cpc	r26, r1
 512:	b1 05       	cpc	r27, r1
 514:	39 f4       	brne	.+14     	; 0x524 <__pack_f+0xee>
 516:	27 ff       	sbrs	r18, 7
 518:	09 c0       	rjmp	.+18     	; 0x52c <__pack_f+0xf6>
 51a:	20 5c       	subi	r18, 0xC0	; 192
 51c:	3f 4f       	sbci	r19, 0xFF	; 255
 51e:	4f 4f       	sbci	r20, 0xFF	; 255
 520:	5f 4f       	sbci	r21, 0xFF	; 255
 522:	04 c0       	rjmp	.+8      	; 0x52c <__pack_f+0xf6>
 524:	21 5c       	subi	r18, 0xC1	; 193
 526:	3f 4f       	sbci	r19, 0xFF	; 255
 528:	4f 4f       	sbci	r20, 0xFF	; 255
 52a:	5f 4f       	sbci	r21, 0xFF	; 255
 52c:	e0 e0       	ldi	r30, 0x00	; 0
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	20 30       	cpi	r18, 0x00	; 0
 532:	a0 e0       	ldi	r26, 0x00	; 0
 534:	3a 07       	cpc	r19, r26
 536:	a0 e0       	ldi	r26, 0x00	; 0
 538:	4a 07       	cpc	r20, r26
 53a:	a0 e4       	ldi	r26, 0x40	; 64
 53c:	5a 07       	cpc	r21, r26
 53e:	10 f0       	brcs	.+4      	; 0x544 <__pack_f+0x10e>
 540:	e1 e0       	ldi	r30, 0x01	; 1
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	79 01       	movw	r14, r18
 546:	8a 01       	movw	r16, r20
 548:	27 c0       	rjmp	.+78     	; 0x598 <__pack_f+0x162>
 54a:	60 38       	cpi	r22, 0x80	; 128
 54c:	71 05       	cpc	r23, r1
 54e:	64 f5       	brge	.+88     	; 0x5a8 <__pack_f+0x172>
 550:	fb 01       	movw	r30, r22
 552:	e1 58       	subi	r30, 0x81	; 129
 554:	ff 4f       	sbci	r31, 0xFF	; 255
 556:	d8 01       	movw	r26, r16
 558:	c7 01       	movw	r24, r14
 55a:	8f 77       	andi	r24, 0x7F	; 127
 55c:	90 70       	andi	r25, 0x00	; 0
 55e:	a0 70       	andi	r26, 0x00	; 0
 560:	b0 70       	andi	r27, 0x00	; 0
 562:	80 34       	cpi	r24, 0x40	; 64
 564:	91 05       	cpc	r25, r1
 566:	a1 05       	cpc	r26, r1
 568:	b1 05       	cpc	r27, r1
 56a:	39 f4       	brne	.+14     	; 0x57a <__pack_f+0x144>
 56c:	e7 fe       	sbrs	r14, 7
 56e:	0d c0       	rjmp	.+26     	; 0x58a <__pack_f+0x154>
 570:	80 e4       	ldi	r24, 0x40	; 64
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	a0 e0       	ldi	r26, 0x00	; 0
 576:	b0 e0       	ldi	r27, 0x00	; 0
 578:	04 c0       	rjmp	.+8      	; 0x582 <__pack_f+0x14c>
 57a:	8f e3       	ldi	r24, 0x3F	; 63
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	a0 e0       	ldi	r26, 0x00	; 0
 580:	b0 e0       	ldi	r27, 0x00	; 0
 582:	e8 0e       	add	r14, r24
 584:	f9 1e       	adc	r15, r25
 586:	0a 1f       	adc	r16, r26
 588:	1b 1f       	adc	r17, r27
 58a:	17 ff       	sbrs	r17, 7
 58c:	05 c0       	rjmp	.+10     	; 0x598 <__pack_f+0x162>
 58e:	16 95       	lsr	r17
 590:	07 95       	ror	r16
 592:	f7 94       	ror	r15
 594:	e7 94       	ror	r14
 596:	31 96       	adiw	r30, 0x01	; 1
 598:	87 e0       	ldi	r24, 0x07	; 7
 59a:	16 95       	lsr	r17
 59c:	07 95       	ror	r16
 59e:	f7 94       	ror	r15
 5a0:	e7 94       	ror	r14
 5a2:	8a 95       	dec	r24
 5a4:	d1 f7       	brne	.-12     	; 0x59a <__pack_f+0x164>
 5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <__pack_f+0x17c>
 5a8:	ee 24       	eor	r14, r14
 5aa:	ff 24       	eor	r15, r15
 5ac:	87 01       	movw	r16, r14
 5ae:	ef ef       	ldi	r30, 0xFF	; 255
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	6e 2f       	mov	r22, r30
 5b4:	67 95       	ror	r22
 5b6:	66 27       	eor	r22, r22
 5b8:	67 95       	ror	r22
 5ba:	90 2f       	mov	r25, r16
 5bc:	9f 77       	andi	r25, 0x7F	; 127
 5be:	d7 94       	ror	r13
 5c0:	dd 24       	eor	r13, r13
 5c2:	d7 94       	ror	r13
 5c4:	8e 2f       	mov	r24, r30
 5c6:	86 95       	lsr	r24
 5c8:	49 2f       	mov	r20, r25
 5ca:	46 2b       	or	r20, r22
 5cc:	58 2f       	mov	r21, r24
 5ce:	5d 29       	or	r21, r13
 5d0:	b7 01       	movw	r22, r14
 5d2:	ca 01       	movw	r24, r20
 5d4:	1f 91       	pop	r17
 5d6:	0f 91       	pop	r16
 5d8:	ff 90       	pop	r15
 5da:	ef 90       	pop	r14
 5dc:	df 90       	pop	r13
 5de:	08 95       	ret

000005e0 <__unpack_f>:
 5e0:	fc 01       	movw	r30, r24
 5e2:	db 01       	movw	r26, r22
 5e4:	40 81       	ld	r20, Z
 5e6:	51 81       	ldd	r21, Z+1	; 0x01
 5e8:	22 81       	ldd	r18, Z+2	; 0x02
 5ea:	62 2f       	mov	r22, r18
 5ec:	6f 77       	andi	r22, 0x7F	; 127
 5ee:	70 e0       	ldi	r23, 0x00	; 0
 5f0:	22 1f       	adc	r18, r18
 5f2:	22 27       	eor	r18, r18
 5f4:	22 1f       	adc	r18, r18
 5f6:	93 81       	ldd	r25, Z+3	; 0x03
 5f8:	89 2f       	mov	r24, r25
 5fa:	88 0f       	add	r24, r24
 5fc:	82 2b       	or	r24, r18
 5fe:	28 2f       	mov	r18, r24
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	99 1f       	adc	r25, r25
 604:	99 27       	eor	r25, r25
 606:	99 1f       	adc	r25, r25
 608:	11 96       	adiw	r26, 0x01	; 1
 60a:	9c 93       	st	X, r25
 60c:	11 97       	sbiw	r26, 0x01	; 1
 60e:	21 15       	cp	r18, r1
 610:	31 05       	cpc	r19, r1
 612:	a9 f5       	brne	.+106    	; 0x67e <__unpack_f+0x9e>
 614:	41 15       	cp	r20, r1
 616:	51 05       	cpc	r21, r1
 618:	61 05       	cpc	r22, r1
 61a:	71 05       	cpc	r23, r1
 61c:	11 f4       	brne	.+4      	; 0x622 <__unpack_f+0x42>
 61e:	82 e0       	ldi	r24, 0x02	; 2
 620:	37 c0       	rjmp	.+110    	; 0x690 <__unpack_f+0xb0>
 622:	82 e8       	ldi	r24, 0x82	; 130
 624:	9f ef       	ldi	r25, 0xFF	; 255
 626:	13 96       	adiw	r26, 0x03	; 3
 628:	9c 93       	st	X, r25
 62a:	8e 93       	st	-X, r24
 62c:	12 97       	sbiw	r26, 0x02	; 2
 62e:	9a 01       	movw	r18, r20
 630:	ab 01       	movw	r20, r22
 632:	67 e0       	ldi	r22, 0x07	; 7
 634:	22 0f       	add	r18, r18
 636:	33 1f       	adc	r19, r19
 638:	44 1f       	adc	r20, r20
 63a:	55 1f       	adc	r21, r21
 63c:	6a 95       	dec	r22
 63e:	d1 f7       	brne	.-12     	; 0x634 <__unpack_f+0x54>
 640:	83 e0       	ldi	r24, 0x03	; 3
 642:	8c 93       	st	X, r24
 644:	0d c0       	rjmp	.+26     	; 0x660 <__unpack_f+0x80>
 646:	22 0f       	add	r18, r18
 648:	33 1f       	adc	r19, r19
 64a:	44 1f       	adc	r20, r20
 64c:	55 1f       	adc	r21, r21
 64e:	12 96       	adiw	r26, 0x02	; 2
 650:	8d 91       	ld	r24, X+
 652:	9c 91       	ld	r25, X
 654:	13 97       	sbiw	r26, 0x03	; 3
 656:	01 97       	sbiw	r24, 0x01	; 1
 658:	13 96       	adiw	r26, 0x03	; 3
 65a:	9c 93       	st	X, r25
 65c:	8e 93       	st	-X, r24
 65e:	12 97       	sbiw	r26, 0x02	; 2
 660:	20 30       	cpi	r18, 0x00	; 0
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	38 07       	cpc	r19, r24
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	48 07       	cpc	r20, r24
 66a:	80 e4       	ldi	r24, 0x40	; 64
 66c:	58 07       	cpc	r21, r24
 66e:	58 f3       	brcs	.-42     	; 0x646 <__unpack_f+0x66>
 670:	14 96       	adiw	r26, 0x04	; 4
 672:	2d 93       	st	X+, r18
 674:	3d 93       	st	X+, r19
 676:	4d 93       	st	X+, r20
 678:	5c 93       	st	X, r21
 67a:	17 97       	sbiw	r26, 0x07	; 7
 67c:	08 95       	ret
 67e:	2f 3f       	cpi	r18, 0xFF	; 255
 680:	31 05       	cpc	r19, r1
 682:	79 f4       	brne	.+30     	; 0x6a2 <__unpack_f+0xc2>
 684:	41 15       	cp	r20, r1
 686:	51 05       	cpc	r21, r1
 688:	61 05       	cpc	r22, r1
 68a:	71 05       	cpc	r23, r1
 68c:	19 f4       	brne	.+6      	; 0x694 <__unpack_f+0xb4>
 68e:	84 e0       	ldi	r24, 0x04	; 4
 690:	8c 93       	st	X, r24
 692:	08 95       	ret
 694:	64 ff       	sbrs	r22, 4
 696:	03 c0       	rjmp	.+6      	; 0x69e <__unpack_f+0xbe>
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	8c 93       	st	X, r24
 69c:	12 c0       	rjmp	.+36     	; 0x6c2 <__unpack_f+0xe2>
 69e:	1c 92       	st	X, r1
 6a0:	10 c0       	rjmp	.+32     	; 0x6c2 <__unpack_f+0xe2>
 6a2:	2f 57       	subi	r18, 0x7F	; 127
 6a4:	30 40       	sbci	r19, 0x00	; 0
 6a6:	13 96       	adiw	r26, 0x03	; 3
 6a8:	3c 93       	st	X, r19
 6aa:	2e 93       	st	-X, r18
 6ac:	12 97       	sbiw	r26, 0x02	; 2
 6ae:	83 e0       	ldi	r24, 0x03	; 3
 6b0:	8c 93       	st	X, r24
 6b2:	87 e0       	ldi	r24, 0x07	; 7
 6b4:	44 0f       	add	r20, r20
 6b6:	55 1f       	adc	r21, r21
 6b8:	66 1f       	adc	r22, r22
 6ba:	77 1f       	adc	r23, r23
 6bc:	8a 95       	dec	r24
 6be:	d1 f7       	brne	.-12     	; 0x6b4 <__unpack_f+0xd4>
 6c0:	70 64       	ori	r23, 0x40	; 64
 6c2:	14 96       	adiw	r26, 0x04	; 4
 6c4:	4d 93       	st	X+, r20
 6c6:	5d 93       	st	X+, r21
 6c8:	6d 93       	st	X+, r22
 6ca:	7c 93       	st	X, r23
 6cc:	17 97       	sbiw	r26, 0x07	; 7
 6ce:	08 95       	ret

000006d0 <delay_s>:
#include "Delay.h"

volatile int overflowCounter = 0;
// SECOND
void delay_s(uint16_t timeInn)
{
 6d0:	df 93       	push	r29
 6d2:	cf 93       	push	r28
 6d4:	00 d0       	rcall	.+0      	; 0x6d6 <delay_s+0x6>
 6d6:	00 d0       	rcall	.+0      	; 0x6d8 <delay_s+0x8>
 6d8:	cd b7       	in	r28, 0x3d	; 61
 6da:	de b7       	in	r29, 0x3e	; 62
 6dc:	9c 83       	std	Y+4, r25	; 0x04
 6de:	8b 83       	std	Y+3, r24	; 0x03
	TCCR0B |= (1 << CS00) | (1 << CS02); 	//set up timer with prescaling 1024 or 16ms
 6e0:	a5 e4       	ldi	r26, 0x45	; 69
 6e2:	b0 e0       	ldi	r27, 0x00	; 0
 6e4:	e5 e4       	ldi	r30, 0x45	; 69
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	80 81       	ld	r24, Z
 6ea:	85 60       	ori	r24, 0x05	; 5
 6ec:	8c 93       	st	X, r24
	TCNT0 = 0; 		// initialize counter
 6ee:	e6 e4       	ldi	r30, 0x46	; 70
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	10 82       	st	Z, r1
	TIMSK0 |= (1 << TOIE0); 	// enables overflow interrupt
 6f4:	ae e6       	ldi	r26, 0x6E	; 110
 6f6:	b0 e0       	ldi	r27, 0x00	; 0
 6f8:	ee e6       	ldi	r30, 0x6E	; 110
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	80 81       	ld	r24, Z
 6fe:	81 60       	ori	r24, 0x01	; 1
 700:	8c 93       	st	X, r24
	sei();		// enables global interrupt
 702:	78 94       	sei
	overflowCounter = 0;
 704:	10 92 27 02 	sts	0x0227, r1
 708:	10 92 26 02 	sts	0x0226, r1
	int  tick = (timeInn)/ 0.016384; // calc the nr of ticks
 70c:	8b 81       	ldd	r24, Y+3	; 0x03
 70e:	9c 81       	ldd	r25, Y+4	; 0x04
 710:	cc 01       	movw	r24, r24
 712:	a0 e0       	ldi	r26, 0x00	; 0
 714:	b0 e0       	ldi	r27, 0x00	; 0
 716:	bc 01       	movw	r22, r24
 718:	cd 01       	movw	r24, r26
 71a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__floatunsisf>
 71e:	dc 01       	movw	r26, r24
 720:	cb 01       	movw	r24, r22
 722:	bc 01       	movw	r22, r24
 724:	cd 01       	movw	r24, r26
 726:	2d eb       	ldi	r18, 0xBD	; 189
 728:	37 e3       	ldi	r19, 0x37	; 55
 72a:	46 e8       	ldi	r20, 0x86	; 134
 72c:	5c e3       	ldi	r21, 0x3C	; 60
 72e:	0e 94 53 00 	call	0xa6	; 0xa6 <__divsf3>
 732:	dc 01       	movw	r26, r24
 734:	cb 01       	movw	r24, r22
 736:	bc 01       	movw	r22, r24
 738:	cd 01       	movw	r24, r26
 73a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__fixsfsi>
 73e:	dc 01       	movw	r26, r24
 740:	cb 01       	movw	r24, r22
 742:	9a 83       	std	Y+2, r25	; 0x02
 744:	89 83       	std	Y+1, r24	; 0x01
	while(overflowCounter <= tick) // remains in a loop until time is over
 746:	20 91 26 02 	lds	r18, 0x0226
 74a:	30 91 27 02 	lds	r19, 0x0227
 74e:	89 81       	ldd	r24, Y+1	; 0x01
 750:	9a 81       	ldd	r25, Y+2	; 0x02
 752:	82 17       	cp	r24, r18
 754:	93 07       	cpc	r25, r19
 756:	bc f7       	brge	.-18     	; 0x746 <delay_s+0x76>
		;
	overflowCounter = 0; // init overflow counter
 758:	10 92 27 02 	sts	0x0227, r1
 75c:	10 92 26 02 	sts	0x0226, r1
}
 760:	0f 90       	pop	r0
 762:	0f 90       	pop	r0
 764:	0f 90       	pop	r0
 766:	0f 90       	pop	r0
 768:	cf 91       	pop	r28
 76a:	df 91       	pop	r29
 76c:	08 95       	ret

0000076e <delay_ms>:
// MILLISECONDS
void delay_ms(uint16_t timeInn)
{
 76e:	df 93       	push	r29
 770:	cf 93       	push	r28
 772:	00 d0       	rcall	.+0      	; 0x774 <delay_ms+0x6>
 774:	00 d0       	rcall	.+0      	; 0x776 <delay_ms+0x8>
 776:	cd b7       	in	r28, 0x3d	; 61
 778:	de b7       	in	r29, 0x3e	; 62
 77a:	9c 83       	std	Y+4, r25	; 0x04
 77c:	8b 83       	std	Y+3, r24	; 0x03
	TCCR0B |=  (1 << CS00) | (1 << CS01); 	//set up timer with prescaling 64 or 1,024ms
 77e:	a5 e4       	ldi	r26, 0x45	; 69
 780:	b0 e0       	ldi	r27, 0x00	; 0
 782:	e5 e4       	ldi	r30, 0x45	; 69
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	80 81       	ld	r24, Z
 788:	83 60       	ori	r24, 0x03	; 3
 78a:	8c 93       	st	X, r24
	TCNT0 = 0; 		// initialize counter
 78c:	e6 e4       	ldi	r30, 0x46	; 70
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	10 82       	st	Z, r1
	TIMSK0 |= (1 << TOIE0); 	// enables overflow interrupt
 792:	ae e6       	ldi	r26, 0x6E	; 110
 794:	b0 e0       	ldi	r27, 0x00	; 0
 796:	ee e6       	ldi	r30, 0x6E	; 110
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	80 81       	ld	r24, Z
 79c:	81 60       	ori	r24, 0x01	; 1
 79e:	8c 93       	st	X, r24
	sei();		// enables global interrupt
 7a0:	78 94       	sei
	overflowCounter = 0; // init overflow counter
 7a2:	10 92 27 02 	sts	0x0227, r1
 7a6:	10 92 26 02 	sts	0x0226, r1
	int tick = (timeInn)/ 1.024; // calc the nr of ticks
 7aa:	8b 81       	ldd	r24, Y+3	; 0x03
 7ac:	9c 81       	ldd	r25, Y+4	; 0x04
 7ae:	cc 01       	movw	r24, r24
 7b0:	a0 e0       	ldi	r26, 0x00	; 0
 7b2:	b0 e0       	ldi	r27, 0x00	; 0
 7b4:	bc 01       	movw	r22, r24
 7b6:	cd 01       	movw	r24, r26
 7b8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__floatunsisf>
 7bc:	dc 01       	movw	r26, r24
 7be:	cb 01       	movw	r24, r22
 7c0:	bc 01       	movw	r22, r24
 7c2:	cd 01       	movw	r24, r26
 7c4:	2f e6       	ldi	r18, 0x6F	; 111
 7c6:	32 e1       	ldi	r19, 0x12	; 18
 7c8:	43 e8       	ldi	r20, 0x83	; 131
 7ca:	5f e3       	ldi	r21, 0x3F	; 63
 7cc:	0e 94 53 00 	call	0xa6	; 0xa6 <__divsf3>
 7d0:	dc 01       	movw	r26, r24
 7d2:	cb 01       	movw	r24, r22
 7d4:	bc 01       	movw	r22, r24
 7d6:	cd 01       	movw	r24, r26
 7d8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__fixsfsi>
 7dc:	dc 01       	movw	r26, r24
 7de:	cb 01       	movw	r24, r22
 7e0:	9a 83       	std	Y+2, r25	; 0x02
 7e2:	89 83       	std	Y+1, r24	; 0x01
	if(tick < 1)
 7e4:	89 81       	ldd	r24, Y+1	; 0x01
 7e6:	9a 81       	ldd	r25, Y+2	; 0x02
 7e8:	18 16       	cp	r1, r24
 7ea:	19 06       	cpc	r1, r25
 7ec:	24 f0       	brlt	.+8      	; 0x7f6 <delay_ms+0x88>
	{
		tick = 1;
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	9a 83       	std	Y+2, r25	; 0x02
 7f4:	89 83       	std	Y+1, r24	; 0x01
	}
	while(overflowCounter <= tick) // remains in a loop until time is over
 7f6:	20 91 26 02 	lds	r18, 0x0226
 7fa:	30 91 27 02 	lds	r19, 0x0227
 7fe:	89 81       	ldd	r24, Y+1	; 0x01
 800:	9a 81       	ldd	r25, Y+2	; 0x02
 802:	82 17       	cp	r24, r18
 804:	93 07       	cpc	r25, r19
 806:	bc f7       	brge	.-18     	; 0x7f6 <delay_ms+0x88>
		;
	overflowCounter = 0; // init overflow counter
 808:	10 92 27 02 	sts	0x0227, r1
 80c:	10 92 26 02 	sts	0x0226, r1
}
 810:	0f 90       	pop	r0
 812:	0f 90       	pop	r0
 814:	0f 90       	pop	r0
 816:	0f 90       	pop	r0
 818:	cf 91       	pop	r28
 81a:	df 91       	pop	r29
 81c:	08 95       	ret

0000081e <delay_us>:
//MICROSECOND
void delay_us(uint16_t timeInn)
{
 81e:	df 93       	push	r29
 820:	cf 93       	push	r28
 822:	00 d0       	rcall	.+0      	; 0x824 <delay_us+0x6>
 824:	00 d0       	rcall	.+0      	; 0x826 <delay_us+0x8>
 826:	cd b7       	in	r28, 0x3d	; 61
 828:	de b7       	in	r29, 0x3e	; 62
 82a:	9c 83       	std	Y+4, r25	; 0x04
 82c:	8b 83       	std	Y+3, r24	; 0x03
	TCCR0B |=  (1 << CS00); 	//set up timer with no prescaling
 82e:	a5 e4       	ldi	r26, 0x45	; 69
 830:	b0 e0       	ldi	r27, 0x00	; 0
 832:	e5 e4       	ldi	r30, 0x45	; 69
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	80 81       	ld	r24, Z
 838:	81 60       	ori	r24, 0x01	; 1
 83a:	8c 93       	st	X, r24
	TCNT0 = 0; 		// initialize counter
 83c:	e6 e4       	ldi	r30, 0x46	; 70
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	10 82       	st	Z, r1
	TIMSK0 |= (1 << TOIE0); 	// enables overflow interrupt
 842:	ae e6       	ldi	r26, 0x6E	; 110
 844:	b0 e0       	ldi	r27, 0x00	; 0
 846:	ee e6       	ldi	r30, 0x6E	; 110
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	80 81       	ld	r24, Z
 84c:	81 60       	ori	r24, 0x01	; 1
 84e:	8c 93       	st	X, r24
	sei();		// enables global interrupt
 850:	78 94       	sei
	overflowCounter = 0; 	// init overflow counter
 852:	10 92 27 02 	sts	0x0227, r1
 856:	10 92 26 02 	sts	0x0226, r1
	int tick = (timeInn/(16)); // calc the nr of ticks
 85a:	8b 81       	ldd	r24, Y+3	; 0x03
 85c:	9c 81       	ldd	r25, Y+4	; 0x04
 85e:	92 95       	swap	r25
 860:	82 95       	swap	r24
 862:	8f 70       	andi	r24, 0x0F	; 15
 864:	89 27       	eor	r24, r25
 866:	9f 70       	andi	r25, 0x0F	; 15
 868:	89 27       	eor	r24, r25
 86a:	9a 83       	std	Y+2, r25	; 0x02
 86c:	89 83       	std	Y+1, r24	; 0x01
	overflowCounter = 0; 	// init overflow counter
 86e:	10 92 27 02 	sts	0x0227, r1
 872:	10 92 26 02 	sts	0x0226, r1
	if(tick < 1)
 876:	89 81       	ldd	r24, Y+1	; 0x01
 878:	9a 81       	ldd	r25, Y+2	; 0x02
 87a:	18 16       	cp	r1, r24
 87c:	19 06       	cpc	r1, r25
 87e:	24 f0       	brlt	.+8      	; 0x888 <delay_us+0x6a>
	{
		tick = 1;
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	9a 83       	std	Y+2, r25	; 0x02
 886:	89 83       	std	Y+1, r24	; 0x01
	}
	while(overflowCounter <= tick) // remains in a loop until time is over
 888:	20 91 26 02 	lds	r18, 0x0226
 88c:	30 91 27 02 	lds	r19, 0x0227
 890:	89 81       	ldd	r24, Y+1	; 0x01
 892:	9a 81       	ldd	r25, Y+2	; 0x02
 894:	82 17       	cp	r24, r18
 896:	93 07       	cpc	r25, r19
 898:	bc f7       	brge	.-18     	; 0x888 <delay_us+0x6a>
		;
	overflowCounter = 0; // init overflow counter
 89a:	10 92 27 02 	sts	0x0227, r1
 89e:	10 92 26 02 	sts	0x0226, r1
}
 8a2:	0f 90       	pop	r0
 8a4:	0f 90       	pop	r0
 8a6:	0f 90       	pop	r0
 8a8:	0f 90       	pop	r0
 8aa:	cf 91       	pop	r28
 8ac:	df 91       	pop	r29
 8ae:	08 95       	ret

000008b0 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 8b0:	1f 92       	push	r1
 8b2:	0f 92       	push	r0
 8b4:	0f b6       	in	r0, 0x3f	; 63
 8b6:	0f 92       	push	r0
 8b8:	11 24       	eor	r1, r1
 8ba:	8f 93       	push	r24
 8bc:	9f 93       	push	r25
 8be:	df 93       	push	r29
 8c0:	cf 93       	push	r28
 8c2:	cd b7       	in	r28, 0x3d	; 61
 8c4:	de b7       	in	r29, 0x3e	; 62
	overflowCounter++; // keeps info/counting  of number of overflows
 8c6:	80 91 26 02 	lds	r24, 0x0226
 8ca:	90 91 27 02 	lds	r25, 0x0227
 8ce:	01 96       	adiw	r24, 0x01	; 1
 8d0:	90 93 27 02 	sts	0x0227, r25
 8d4:	80 93 26 02 	sts	0x0226, r24
}
 8d8:	cf 91       	pop	r28
 8da:	df 91       	pop	r29
 8dc:	9f 91       	pop	r25
 8de:	8f 91       	pop	r24
 8e0:	0f 90       	pop	r0
 8e2:	0f be       	out	0x3f, r0	; 63
 8e4:	0f 90       	pop	r0
 8e6:	1f 90       	pop	r1
 8e8:	18 95       	reti

000008ea <Init_Uart>:
void appendSerial(char c);
void serialWrite(char c[]);
void delay_ms(uint16_t timeInn);

void Init_Uart ()
{
 8ea:	df 93       	push	r29
 8ec:	cf 93       	push	r28
 8ee:	cd b7       	in	r28, 0x3d	; 61
 8f0:	de b7       	in	r29, 0x3e	; 62
	// baudrate = 57600
	UBRR0H = (BRC >> 8);
 8f2:	e5 ec       	ldi	r30, 0xC5	; 197
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	10 82       	st	Z, r1
	UBRR0L = BRC;
 8f8:	e4 ec       	ldi	r30, 0xC4	; 196
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	87 e6       	ldi	r24, 0x67	; 103
 8fe:	80 83       	st	Z, r24

	UCSR0B = (1 << TXEN0) | (1 << TXCIE0);
 900:	e1 ec       	ldi	r30, 0xC1	; 193
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	88 e4       	ldi	r24, 0x48	; 72
 906:	80 83       	st	Z, r24
	 // set frame format
	UCSR0C= (1 << UCSZ01) |(1 << UCSZ00) ;
 908:	e2 ec       	ldi	r30, 0xC2	; 194
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	86 e0       	ldi	r24, 0x06	; 6
 90e:	80 83       	st	Z, r24

}
 910:	cf 91       	pop	r28
 912:	df 91       	pop	r29
 914:	08 95       	ret

00000916 <main>:

int main()
{
 916:	df 93       	push	r29
 918:	cf 93       	push	r28
 91a:	cd b7       	in	r28, 0x3d	; 61
 91c:	de b7       	in	r29, 0x3e	; 62
 91e:	ae 97       	sbiw	r28, 0x2e	; 46
 920:	0f b6       	in	r0, 0x3f	; 63
 922:	f8 94       	cli
 924:	de bf       	out	0x3e, r29	; 62
 926:	0f be       	out	0x3f, r0	; 63
 928:	cd bf       	out	0x3d, r28	; 61
//	Init_Uart();

	UBRR0H = (BRC >> 8); // baudrate = 57600
 92a:	e5 ec       	ldi	r30, 0xC5	; 197
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	10 82       	st	Z, r1
	UBRR0L = BRC;
 930:	e4 ec       	ldi	r30, 0xC4	; 196
 932:	f0 e0       	ldi	r31, 0x00	; 0
 934:	87 e6       	ldi	r24, 0x67	; 103
 936:	80 83       	st	Z, r24
	UCSR0B = (1 << TXEN0) | (1 << TXCIE0);
 938:	e1 ec       	ldi	r30, 0xC1	; 193
 93a:	f0 e0       	ldi	r31, 0x00	; 0
 93c:	88 e4       	ldi	r24, 0x48	; 72
 93e:	80 83       	st	Z, r24
	UCSR0C= (1 << UCSZ01) |(1 << UCSZ00) ;  // set frame format 8 bit
 940:	e2 ec       	ldi	r30, 0xC2	; 194
 942:	f0 e0       	ldi	r31, 0x00	; 0
 944:	86 e0       	ldi	r24, 0x06	; 6
 946:	80 83       	st	Z, r24

	sei();
 948:	78 94       	sei

	while (1)
	{
		int arr[20];
		int number = 23;
 94a:	87 e1       	ldi	r24, 0x17	; 23
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	9e 83       	std	Y+6, r25	; 0x06
 950:	8d 83       	std	Y+5, r24	; 0x05
		int count = 0;
 952:	1c 82       	std	Y+4, r1	; 0x04
 954:	1b 82       	std	Y+3, r1	; 0x03

		if ( number < 10)
 956:	8d 81       	ldd	r24, Y+5	; 0x05
 958:	9e 81       	ldd	r25, Y+6	; 0x06
 95a:	8a 30       	cpi	r24, 0x0A	; 10
 95c:	91 05       	cpc	r25, r1
 95e:	0c f0       	brlt	.+2      	; 0x962 <main+0x4c>
 960:	41 c0       	rjmp	.+130    	; 0x9e4 <main+0xce>
		{
			arr[0] = number;
 962:	8d 81       	ldd	r24, Y+5	; 0x05
 964:	9e 81       	ldd	r25, Y+6	; 0x06
 966:	98 87       	std	Y+8, r25	; 0x08
 968:	8f 83       	std	Y+7, r24	; 0x07
			//count ++;
			delay_ms(1000);
 96a:	88 ee       	ldi	r24, 0xE8	; 232
 96c:	93 e0       	ldi	r25, 0x03	; 3
 96e:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>
 972:	38 c0       	rjmp	.+112    	; 0x9e4 <main+0xce>
		}

		while( number % 10  > 0 )
		{

			arr[count] = number % 10;
 974:	eb 81       	ldd	r30, Y+3	; 0x03
 976:	fc 81       	ldd	r31, Y+4	; 0x04
 978:	8d 81       	ldd	r24, Y+5	; 0x05
 97a:	9e 81       	ldd	r25, Y+6	; 0x06
 97c:	2a e0       	ldi	r18, 0x0A	; 10
 97e:	30 e0       	ldi	r19, 0x00	; 0
 980:	b9 01       	movw	r22, r18
 982:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__divmodhi4>
 986:	ac 01       	movw	r20, r24
 988:	9f 01       	movw	r18, r30
 98a:	22 0f       	add	r18, r18
 98c:	33 1f       	adc	r19, r19
 98e:	ce 01       	movw	r24, r28
 990:	01 96       	adiw	r24, 0x01	; 1
 992:	82 0f       	add	r24, r18
 994:	93 1f       	adc	r25, r19
 996:	fc 01       	movw	r30, r24
 998:	36 96       	adiw	r30, 0x06	; 6
 99a:	51 83       	std	Z+1, r21	; 0x01
 99c:	40 83       	st	Z, r20
			number = number / 10;
 99e:	8d 81       	ldd	r24, Y+5	; 0x05
 9a0:	9e 81       	ldd	r25, Y+6	; 0x06
 9a2:	2a e0       	ldi	r18, 0x0A	; 10
 9a4:	30 e0       	ldi	r19, 0x00	; 0
 9a6:	b9 01       	movw	r22, r18
 9a8:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__divmodhi4>
 9ac:	cb 01       	movw	r24, r22
 9ae:	9e 83       	std	Y+6, r25	; 0x06
 9b0:	8d 83       	std	Y+5, r24	; 0x05
			count++;
 9b2:	8b 81       	ldd	r24, Y+3	; 0x03
 9b4:	9c 81       	ldd	r25, Y+4	; 0x04
 9b6:	01 96       	adiw	r24, 0x01	; 1
 9b8:	9c 83       	std	Y+4, r25	; 0x04
 9ba:	8b 83       	std	Y+3, r24	; 0x03
			if(number < 10)
 9bc:	8d 81       	ldd	r24, Y+5	; 0x05
 9be:	9e 81       	ldd	r25, Y+6	; 0x06
 9c0:	8a 30       	cpi	r24, 0x0A	; 10
 9c2:	91 05       	cpc	r25, r1
 9c4:	7c f4       	brge	.+30     	; 0x9e4 <main+0xce>
			{
					arr[count] = number;
 9c6:	8b 81       	ldd	r24, Y+3	; 0x03
 9c8:	9c 81       	ldd	r25, Y+4	; 0x04
 9ca:	9c 01       	movw	r18, r24
 9cc:	22 0f       	add	r18, r18
 9ce:	33 1f       	adc	r19, r19
 9d0:	ce 01       	movw	r24, r28
 9d2:	01 96       	adiw	r24, 0x01	; 1
 9d4:	82 0f       	add	r24, r18
 9d6:	93 1f       	adc	r25, r19
 9d8:	fc 01       	movw	r30, r24
 9da:	36 96       	adiw	r30, 0x06	; 6
 9dc:	8d 81       	ldd	r24, Y+5	; 0x05
 9de:	9e 81       	ldd	r25, Y+6	; 0x06
 9e0:	91 83       	std	Z+1, r25	; 0x01
 9e2:	80 83       	st	Z, r24
			arr[0] = number;
			//count ++;
			delay_ms(1000);
		}

		while( number % 10  > 0 )
 9e4:	8d 81       	ldd	r24, Y+5	; 0x05
 9e6:	9e 81       	ldd	r25, Y+6	; 0x06
 9e8:	2a e0       	ldi	r18, 0x0A	; 10
 9ea:	30 e0       	ldi	r19, 0x00	; 0
 9ec:	b9 01       	movw	r22, r18
 9ee:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__divmodhi4>
 9f2:	18 16       	cp	r1, r24
 9f4:	19 06       	cpc	r1, r25
 9f6:	0c f4       	brge	.+2      	; 0x9fa <main+0xe4>
 9f8:	bd cf       	rjmp	.-134    	; 0x974 <main+0x5e>
					arr[count] = number;
			}

		}

		for(int i  = count ; i >= 0 ; i--)
 9fa:	8b 81       	ldd	r24, Y+3	; 0x03
 9fc:	9c 81       	ldd	r25, Y+4	; 0x04
 9fe:	9a 83       	std	Y+2, r25	; 0x02
 a00:	89 83       	std	Y+1, r24	; 0x01
 a02:	1d c0       	rjmp	.+58     	; 0xa3e <main+0x128>
		{
			UDR0 = hexArr[arr[i]];
 a04:	a6 ec       	ldi	r26, 0xC6	; 198
 a06:	b0 e0       	ldi	r27, 0x00	; 0
 a08:	89 81       	ldd	r24, Y+1	; 0x01
 a0a:	9a 81       	ldd	r25, Y+2	; 0x02
 a0c:	9c 01       	movw	r18, r24
 a0e:	22 0f       	add	r18, r18
 a10:	33 1f       	adc	r19, r19
 a12:	ce 01       	movw	r24, r28
 a14:	01 96       	adiw	r24, 0x01	; 1
 a16:	82 0f       	add	r24, r18
 a18:	93 1f       	adc	r25, r19
 a1a:	fc 01       	movw	r30, r24
 a1c:	36 96       	adiw	r30, 0x06	; 6
 a1e:	80 81       	ld	r24, Z
 a20:	91 81       	ldd	r25, Z+1	; 0x01
 a22:	fc 01       	movw	r30, r24
 a24:	eb 5e       	subi	r30, 0xEB	; 235
 a26:	fd 4f       	sbci	r31, 0xFD	; 253
 a28:	80 81       	ld	r24, Z
 a2a:	8c 93       	st	X, r24

			delay_ms(1000);
 a2c:	88 ee       	ldi	r24, 0xE8	; 232
 a2e:	93 e0       	ldi	r25, 0x03	; 3
 a30:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>
					arr[count] = number;
			}

		}

		for(int i  = count ; i >= 0 ; i--)
 a34:	89 81       	ldd	r24, Y+1	; 0x01
 a36:	9a 81       	ldd	r25, Y+2	; 0x02
 a38:	01 97       	sbiw	r24, 0x01	; 1
 a3a:	9a 83       	std	Y+2, r25	; 0x02
 a3c:	89 83       	std	Y+1, r24	; 0x01
 a3e:	89 81       	ldd	r24, Y+1	; 0x01
 a40:	9a 81       	ldd	r25, Y+2	; 0x02
 a42:	99 23       	and	r25, r25
 a44:	fc f6       	brge	.-66     	; 0xa04 <main+0xee>
			UDR0 = hexArr[arr[i]];

			delay_ms(1000);

		}
		serialWrite("\n\r");
 a46:	80 e0       	ldi	r24, 0x00	; 0
 a48:	91 e0       	ldi	r25, 0x01	; 1
 a4a:	0e 94 46 05 	call	0xa8c	; 0xa8c <serialWrite>
 a4e:	7d cf       	rjmp	.-262    	; 0x94a <main+0x34>

00000a50 <appendSerial>:
	}
	return 0;
}

void appendSerial(char c)
{
 a50:	df 93       	push	r29
 a52:	cf 93       	push	r28
 a54:	0f 92       	push	r0
 a56:	cd b7       	in	r28, 0x3d	; 61
 a58:	de b7       	in	r29, 0x3e	; 62
 a5a:	89 83       	std	Y+1, r24	; 0x01
	serialBuffer[serialWritePos] = c;
 a5c:	80 91 29 02 	lds	r24, 0x0229
 a60:	88 2f       	mov	r24, r24
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	fc 01       	movw	r30, r24
 a66:	e6 5d       	subi	r30, 0xD6	; 214
 a68:	fd 4f       	sbci	r31, 0xFD	; 253
 a6a:	89 81       	ldd	r24, Y+1	; 0x01
 a6c:	80 83       	st	Z, r24
	serialWritePos++;
 a6e:	80 91 29 02 	lds	r24, 0x0229
 a72:	8f 5f       	subi	r24, 0xFF	; 255
 a74:	80 93 29 02 	sts	0x0229, r24
	if(serialWritePos >= BUFFERSIZE)
 a78:	80 91 29 02 	lds	r24, 0x0229
 a7c:	88 23       	and	r24, r24
 a7e:	14 f4       	brge	.+4      	; 0xa84 <appendSerial+0x34>
	{
		serialReadPos = 0;
 a80:	10 92 28 02 	sts	0x0228, r1
	}
}
 a84:	0f 90       	pop	r0
 a86:	cf 91       	pop	r28
 a88:	df 91       	pop	r29
 a8a:	08 95       	ret

00000a8c <serialWrite>:

void serialWrite(char c[])
{
 a8c:	0f 93       	push	r16
 a8e:	1f 93       	push	r17
 a90:	df 93       	push	r29
 a92:	cf 93       	push	r28
 a94:	00 d0       	rcall	.+0      	; 0xa96 <serialWrite+0xa>
 a96:	0f 92       	push	r0
 a98:	cd b7       	in	r28, 0x3d	; 61
 a9a:	de b7       	in	r29, 0x3e	; 62
 a9c:	9b 83       	std	Y+3, r25	; 0x03
 a9e:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8_t i = 0; i < strlen(c); i++)
 aa0:	19 82       	std	Y+1, r1	; 0x01
 aa2:	0e c0       	rjmp	.+28     	; 0xac0 <serialWrite+0x34>
	{
		appendSerial(c[i]);
 aa4:	89 81       	ldd	r24, Y+1	; 0x01
 aa6:	28 2f       	mov	r18, r24
 aa8:	30 e0       	ldi	r19, 0x00	; 0
 aaa:	8a 81       	ldd	r24, Y+2	; 0x02
 aac:	9b 81       	ldd	r25, Y+3	; 0x03
 aae:	fc 01       	movw	r30, r24
 ab0:	e2 0f       	add	r30, r18
 ab2:	f3 1f       	adc	r31, r19
 ab4:	80 81       	ld	r24, Z
 ab6:	0e 94 28 05 	call	0xa50	; 0xa50 <appendSerial>
	}
}

void serialWrite(char c[])
{
	for(uint8_t i = 0; i < strlen(c); i++)
 aba:	89 81       	ldd	r24, Y+1	; 0x01
 abc:	8f 5f       	subi	r24, 0xFF	; 255
 abe:	89 83       	std	Y+1, r24	; 0x01
 ac0:	89 81       	ldd	r24, Y+1	; 0x01
 ac2:	08 2f       	mov	r16, r24
 ac4:	10 e0       	ldi	r17, 0x00	; 0
 ac6:	8a 81       	ldd	r24, Y+2	; 0x02
 ac8:	9b 81       	ldd	r25, Y+3	; 0x03
 aca:	0e 94 14 06 	call	0xc28	; 0xc28 <strlen>
 ace:	08 17       	cp	r16, r24
 ad0:	19 07       	cpc	r17, r25
 ad2:	40 f3       	brcs	.-48     	; 0xaa4 <serialWrite+0x18>
	{
		appendSerial(c[i]);
	}
	if(UCSR0A & (1 << UDRE0))
 ad4:	e0 ec       	ldi	r30, 0xC0	; 192
 ad6:	f0 e0       	ldi	r31, 0x00	; 0
 ad8:	80 81       	ld	r24, Z
 ada:	88 2f       	mov	r24, r24
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	80 72       	andi	r24, 0x20	; 32
 ae0:	90 70       	andi	r25, 0x00	; 0
 ae2:	00 97       	sbiw	r24, 0x00	; 0
 ae4:	19 f0       	breq	.+6      	; 0xaec <serialWrite+0x60>
	{
		UDR0 = 0;
 ae6:	e6 ec       	ldi	r30, 0xC6	; 198
 ae8:	f0 e0       	ldi	r31, 0x00	; 0
 aea:	10 82       	st	Z, r1
	}
}
 aec:	0f 90       	pop	r0
 aee:	0f 90       	pop	r0
 af0:	0f 90       	pop	r0
 af2:	cf 91       	pop	r28
 af4:	df 91       	pop	r29
 af6:	1f 91       	pop	r17
 af8:	0f 91       	pop	r16
 afa:	08 95       	ret

00000afc <__vector_20>:

ISR(USART_TX_vect)
{
 afc:	1f 92       	push	r1
 afe:	0f 92       	push	r0
 b00:	0f b6       	in	r0, 0x3f	; 63
 b02:	0f 92       	push	r0
 b04:	11 24       	eor	r1, r1
 b06:	8f 93       	push	r24
 b08:	9f 93       	push	r25
 b0a:	af 93       	push	r26
 b0c:	bf 93       	push	r27
 b0e:	ef 93       	push	r30
 b10:	ff 93       	push	r31
 b12:	df 93       	push	r29
 b14:	cf 93       	push	r28
 b16:	cd b7       	in	r28, 0x3d	; 61
 b18:	de b7       	in	r29, 0x3e	; 62
	if(serialReadPos != serialWritePos)
 b1a:	90 91 28 02 	lds	r25, 0x0228
 b1e:	80 91 29 02 	lds	r24, 0x0229
 b22:	98 17       	cp	r25, r24
 b24:	b1 f0       	breq	.+44     	; 0xb52 <__vector_20+0x56>
	{
		UDR0 = serialBuffer[serialReadPos];
 b26:	a6 ec       	ldi	r26, 0xC6	; 198
 b28:	b0 e0       	ldi	r27, 0x00	; 0
 b2a:	80 91 28 02 	lds	r24, 0x0228
 b2e:	88 2f       	mov	r24, r24
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	fc 01       	movw	r30, r24
 b34:	e6 5d       	subi	r30, 0xD6	; 214
 b36:	fd 4f       	sbci	r31, 0xFD	; 253
 b38:	80 81       	ld	r24, Z
 b3a:	8c 93       	st	X, r24
		serialReadPos++;
 b3c:	80 91 28 02 	lds	r24, 0x0228
 b40:	8f 5f       	subi	r24, 0xFF	; 255
 b42:	80 93 28 02 	sts	0x0228, r24

		if(serialReadPos >= BUFFERSIZE)
 b46:	80 91 28 02 	lds	r24, 0x0228
 b4a:	88 23       	and	r24, r24
 b4c:	14 f4       	brge	.+4      	; 0xb52 <__vector_20+0x56>
		{
			serialReadPos = 0;
 b4e:	10 92 28 02 	sts	0x0228, r1
		}
	}
}
 b52:	cf 91       	pop	r28
 b54:	df 91       	pop	r29
 b56:	ff 91       	pop	r31
 b58:	ef 91       	pop	r30
 b5a:	bf 91       	pop	r27
 b5c:	af 91       	pop	r26
 b5e:	9f 91       	pop	r25
 b60:	8f 91       	pop	r24
 b62:	0f 90       	pop	r0
 b64:	0f be       	out	0x3f, r0	; 63
 b66:	0f 90       	pop	r0
 b68:	1f 90       	pop	r1
 b6a:	18 95       	reti

00000b6c <__divmodhi4>:
 b6c:	97 fb       	bst	r25, 7
 b6e:	09 2e       	mov	r0, r25
 b70:	07 26       	eor	r0, r23
 b72:	0a d0       	rcall	.+20     	; 0xb88 <__divmodhi4_neg1>
 b74:	77 fd       	sbrc	r23, 7
 b76:	04 d0       	rcall	.+8      	; 0xb80 <__divmodhi4_neg2>
 b78:	0c d0       	rcall	.+24     	; 0xb92 <__udivmodhi4>
 b7a:	06 d0       	rcall	.+12     	; 0xb88 <__divmodhi4_neg1>
 b7c:	00 20       	and	r0, r0
 b7e:	1a f4       	brpl	.+6      	; 0xb86 <__divmodhi4_exit>

00000b80 <__divmodhi4_neg2>:
 b80:	70 95       	com	r23
 b82:	61 95       	neg	r22
 b84:	7f 4f       	sbci	r23, 0xFF	; 255

00000b86 <__divmodhi4_exit>:
 b86:	08 95       	ret

00000b88 <__divmodhi4_neg1>:
 b88:	f6 f7       	brtc	.-4      	; 0xb86 <__divmodhi4_exit>
 b8a:	90 95       	com	r25
 b8c:	81 95       	neg	r24
 b8e:	9f 4f       	sbci	r25, 0xFF	; 255
 b90:	08 95       	ret

00000b92 <__udivmodhi4>:
 b92:	aa 1b       	sub	r26, r26
 b94:	bb 1b       	sub	r27, r27
 b96:	51 e1       	ldi	r21, 0x11	; 17
 b98:	07 c0       	rjmp	.+14     	; 0xba8 <__udivmodhi4_ep>

00000b9a <__udivmodhi4_loop>:
 b9a:	aa 1f       	adc	r26, r26
 b9c:	bb 1f       	adc	r27, r27
 b9e:	a6 17       	cp	r26, r22
 ba0:	b7 07       	cpc	r27, r23
 ba2:	10 f0       	brcs	.+4      	; 0xba8 <__udivmodhi4_ep>
 ba4:	a6 1b       	sub	r26, r22
 ba6:	b7 0b       	sbc	r27, r23

00000ba8 <__udivmodhi4_ep>:
 ba8:	88 1f       	adc	r24, r24
 baa:	99 1f       	adc	r25, r25
 bac:	5a 95       	dec	r21
 bae:	a9 f7       	brne	.-22     	; 0xb9a <__udivmodhi4_loop>
 bb0:	80 95       	com	r24
 bb2:	90 95       	com	r25
 bb4:	bc 01       	movw	r22, r24
 bb6:	cd 01       	movw	r24, r26
 bb8:	08 95       	ret

00000bba <__prologue_saves__>:
 bba:	2f 92       	push	r2
 bbc:	3f 92       	push	r3
 bbe:	4f 92       	push	r4
 bc0:	5f 92       	push	r5
 bc2:	6f 92       	push	r6
 bc4:	7f 92       	push	r7
 bc6:	8f 92       	push	r8
 bc8:	9f 92       	push	r9
 bca:	af 92       	push	r10
 bcc:	bf 92       	push	r11
 bce:	cf 92       	push	r12
 bd0:	df 92       	push	r13
 bd2:	ef 92       	push	r14
 bd4:	ff 92       	push	r15
 bd6:	0f 93       	push	r16
 bd8:	1f 93       	push	r17
 bda:	cf 93       	push	r28
 bdc:	df 93       	push	r29
 bde:	cd b7       	in	r28, 0x3d	; 61
 be0:	de b7       	in	r29, 0x3e	; 62
 be2:	ca 1b       	sub	r28, r26
 be4:	db 0b       	sbc	r29, r27
 be6:	0f b6       	in	r0, 0x3f	; 63
 be8:	f8 94       	cli
 bea:	de bf       	out	0x3e, r29	; 62
 bec:	0f be       	out	0x3f, r0	; 63
 bee:	cd bf       	out	0x3d, r28	; 61
 bf0:	09 94       	ijmp

00000bf2 <__epilogue_restores__>:
 bf2:	2a 88       	ldd	r2, Y+18	; 0x12
 bf4:	39 88       	ldd	r3, Y+17	; 0x11
 bf6:	48 88       	ldd	r4, Y+16	; 0x10
 bf8:	5f 84       	ldd	r5, Y+15	; 0x0f
 bfa:	6e 84       	ldd	r6, Y+14	; 0x0e
 bfc:	7d 84       	ldd	r7, Y+13	; 0x0d
 bfe:	8c 84       	ldd	r8, Y+12	; 0x0c
 c00:	9b 84       	ldd	r9, Y+11	; 0x0b
 c02:	aa 84       	ldd	r10, Y+10	; 0x0a
 c04:	b9 84       	ldd	r11, Y+9	; 0x09
 c06:	c8 84       	ldd	r12, Y+8	; 0x08
 c08:	df 80       	ldd	r13, Y+7	; 0x07
 c0a:	ee 80       	ldd	r14, Y+6	; 0x06
 c0c:	fd 80       	ldd	r15, Y+5	; 0x05
 c0e:	0c 81       	ldd	r16, Y+4	; 0x04
 c10:	1b 81       	ldd	r17, Y+3	; 0x03
 c12:	aa 81       	ldd	r26, Y+2	; 0x02
 c14:	b9 81       	ldd	r27, Y+1	; 0x01
 c16:	ce 0f       	add	r28, r30
 c18:	d1 1d       	adc	r29, r1
 c1a:	0f b6       	in	r0, 0x3f	; 63
 c1c:	f8 94       	cli
 c1e:	de bf       	out	0x3e, r29	; 62
 c20:	0f be       	out	0x3f, r0	; 63
 c22:	cd bf       	out	0x3d, r28	; 61
 c24:	ed 01       	movw	r28, r26
 c26:	08 95       	ret

00000c28 <strlen>:
 c28:	fc 01       	movw	r30, r24
 c2a:	01 90       	ld	r0, Z+
 c2c:	00 20       	and	r0, r0
 c2e:	e9 f7       	brne	.-6      	; 0xc2a <strlen+0x2>
 c30:	80 95       	com	r24
 c32:	90 95       	com	r25
 c34:	8e 0f       	add	r24, r30
 c36:	9f 1f       	adc	r25, r31
 c38:	08 95       	ret

00000c3a <_exit>:
 c3a:	f8 94       	cli

00000c3c <__stop_program>:
 c3c:	ff cf       	rjmp	.-2      	; 0xc3c <__stop_program>
