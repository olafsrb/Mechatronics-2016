
UART_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000024c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  000002c0  2**0
                  ALLOC
  2 .stab         00000600  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006e7  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Delay>:
#include <avr/interrupt.h>

volatile uint8_t cDelayDone =0;

void Delay ( uint8_t cDelay )
{
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	0f 92       	push	r0
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	89 83       	std	Y+1, r24	; 0x01
	cDelayDone =0;
  9c:	10 92 00 01 	sts	0x0100, r1
	OCR0A=cDelay ; //compare value set
  a0:	e7 e4       	ldi	r30, 0x47	; 71
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	80 83       	st	Z, r24
	TCNT0=0; // clear the counter
  a8:	e6 e4       	ldi	r30, 0x46	; 70
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	TIMSK0=0x02 ; // turn on compare match A
  ae:	ee e6       	ldi	r30, 0x6E	; 110
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	80 83       	st	Z, r24
	while ( cDelayDone==0)
  b6:	80 91 00 01 	lds	r24, 0x0100
  ba:	88 23       	and	r24, r24
  bc:	e1 f3       	breq	.-8      	; 0xb6 <Delay+0x26>
		{
			; // wait
		}
	TIMSK0=0; // turn off interrupt
  be:	ee e6       	ldi	r30, 0x6E	; 110
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
}
  c4:	0f 90       	pop	r0
  c6:	cf 91       	pop	r28
  c8:	df 91       	pop	r29
  ca:	08 95       	ret

000000cc <main>:

//----------------------------MAIN----------------------------------------------------------------------//

int main()
{
  cc:	df 93       	push	r29
  ce:	cf 93       	push	r28
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
	DDRB=0x20 ; // pin5 i s out
  d4:	e4 e2       	ldi	r30, 0x24	; 36
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 e2       	ldi	r24, 0x20	; 32
  da:	80 83       	st	Z, r24
	// set up timer 0 to generate interrupt on register A compare
	OCR0A=0xFF ; //compare value
  dc:	e7 e4       	ldi	r30, 0x47	; 71
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	80 83       	st	Z, r24
	TCCR0A=0x00 ; // output compare pins disconnected
  e4:	e4 e4       	ldi	r30, 0x44	; 68
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	10 82       	st	Z, r1
	TCCR0B = 0x05 ; // f /1024 = 16MHz/1024=15625Hz
  ea:	e5 e4       	ldi	r30, 0x45	; 69
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	85 e0       	ldi	r24, 0x05	; 5
  f0:	80 83       	st	Z, r24
	TIFR0=0x03 ; // clear all flags
  f2:	e5 e3       	ldi	r30, 0x35	; 53
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	80 83       	st	Z, r24
	TIMSK0=0; // disable all counter 0 interrupts
  fa:	ee e6       	ldi	r30, 0x6E	; 110
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	10 82       	st	Z, r1
	TIFR0=0x03 ;
 100:	e5 e3       	ldi	r30, 0x35	; 53
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	80 83       	st	Z, r24

	sei();
 108:	78 94       	sei
	while(1)
	{
		PORTB =0x20;
 10a:	e5 e2       	ldi	r30, 0x25	; 37
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 e2       	ldi	r24, 0x20	; 32
 110:	80 83       	st	Z, r24
		Delay(2000);
 112:	80 ed       	ldi	r24, 0xD0	; 208
 114:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 118:	80 ed       	ldi	r24, 0xD0	; 208
 11a:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 11e:	80 ed       	ldi	r24, 0xD0	; 208
 120:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 124:	80 ed       	ldi	r24, 0xD0	; 208
 126:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 12a:	80 ed       	ldi	r24, 0xD0	; 208
 12c:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 130:	80 ed       	ldi	r24, 0xD0	; 208
 132:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 136:	80 ed       	ldi	r24, 0xD0	; 208
 138:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 13c:	80 ed       	ldi	r24, 0xD0	; 208
 13e:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 142:	80 ed       	ldi	r24, 0xD0	; 208
 144:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 148:	80 ed       	ldi	r24, 0xD0	; 208
 14a:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 14e:	80 ed       	ldi	r24, 0xD0	; 208
 150:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 154:	80 ed       	ldi	r24, 0xD0	; 208
 156:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 15a:	80 ed       	ldi	r24, 0xD0	; 208
 15c:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 160:	80 ed       	ldi	r24, 0xD0	; 208
 162:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 166:	80 ed       	ldi	r24, 0xD0	; 208
 168:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 16c:	80 ed       	ldi	r24, 0xD0	; 208
 16e:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 172:	80 ed       	ldi	r24, 0xD0	; 208
 174:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 178:	80 ed       	ldi	r24, 0xD0	; 208
 17a:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 17e:	80 ed       	ldi	r24, 0xD0	; 208
 180:	0e 94 48 00 	call	0x90	; 0x90 <Delay>

		PORTB = 0;
 184:	e5 e2       	ldi	r30, 0x25	; 37
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	10 82       	st	Z, r1
		Delay(2000);
 18a:	80 ed       	ldi	r24, 0xD0	; 208
 18c:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 190:	80 ed       	ldi	r24, 0xD0	; 208
 192:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 196:	80 ed       	ldi	r24, 0xD0	; 208
 198:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 19c:	80 ed       	ldi	r24, 0xD0	; 208
 19e:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 1a2:	80 ed       	ldi	r24, 0xD0	; 208
 1a4:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 1a8:	80 ed       	ldi	r24, 0xD0	; 208
 1aa:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 1ae:	80 ed       	ldi	r24, 0xD0	; 208
 1b0:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 1b4:	80 ed       	ldi	r24, 0xD0	; 208
 1b6:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 1ba:	80 ed       	ldi	r24, 0xD0	; 208
 1bc:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 1c0:	80 ed       	ldi	r24, 0xD0	; 208
 1c2:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 1c6:	80 ed       	ldi	r24, 0xD0	; 208
 1c8:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 1cc:	80 ed       	ldi	r24, 0xD0	; 208
 1ce:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 1d2:	80 ed       	ldi	r24, 0xD0	; 208
 1d4:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 1d8:	80 ed       	ldi	r24, 0xD0	; 208
 1da:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 1de:	80 ed       	ldi	r24, 0xD0	; 208
 1e0:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 1e4:	80 ed       	ldi	r24, 0xD0	; 208
 1e6:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 1ea:	80 ed       	ldi	r24, 0xD0	; 208
 1ec:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 1f0:	80 ed       	ldi	r24, 0xD0	; 208
 1f2:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		Delay(2000);
 1f6:	80 ed       	ldi	r24, 0xD0	; 208
 1f8:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
 1fc:	86 cf       	rjmp	.-244    	; 0x10a <main+0x3e>

000001fe <__vector_14>:
	}
	return 0;
}

ISR (TIMER0_COMPA_vect)
{
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
 208:	8f 93       	push	r24
 20a:	df 93       	push	r29
 20c:	cf 93       	push	r28
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
// this IST is called when register value i s equal OCR0A
cDelayDone =1;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 00 01 	sts	0x0100, r24
}
 218:	cf 91       	pop	r28
 21a:	df 91       	pop	r29
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <__vector_16>:

ISR (TIMER0_OVF_vect)
{
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	df 93       	push	r29
 234:	cf 93       	push	r28
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
// this ISR rou tine is called when the counter 0 overflows ( goes from 0xFF to 0x00 )
// n
}
 23a:	cf 91       	pop	r28
 23c:	df 91       	pop	r29
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
