
Analog_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000378  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006b0  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_16>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#include <avr/io.h>
#include <avr/interrupt.h>

int main()
{
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1 << PORTD6);
  88:	aa e2       	ldi	r26, 0x2A	; 42
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	ea e2       	ldi	r30, 0x2A	; 42
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	80 64       	ori	r24, 0x40	; 64
  94:	8c 93       	st	X, r24


	// sets compare mode to define duty cycle waveform generation mode as Fast PWM
		TCCR0A |= (1 << COM0A1) |(1 << WGM00) | (1 << WGM01);
  96:	a4 e4       	ldi	r26, 0x44	; 68
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	e4 e4       	ldi	r30, 0x44	; 68
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	83 68       	ori	r24, 0x83	; 131
  a2:	8c 93       	st	X, r24
		TIMSK0 |= (1 << TOIE0); // Timer overflow interrupt enabled
  a4:	ae e6       	ldi	r26, 0x6E	; 110
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	ee e6       	ldi	r30, 0x6E	; 110
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	8c 93       	st	X, r24

		sei(); // enables global interrupt
  b2:	78 94       	sei
		TCCR0B |= (1 << CS00) | (1 << CS02); // prescaler of 1024
  b4:	a5 e4       	ldi	r26, 0x45	; 69
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	e5 e4       	ldi	r30, 0x45	; 69
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	85 60       	ori	r24, 0x05	; 5
  c0:	8c 93       	st	X, r24
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0


}
  c6:	cf 91       	pop	r28
  c8:	df 91       	pop	r29
  ca:	08 95       	ret

000000cc <__vector_16>:

ISR(TIMER0_OVF_vect)
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	df 93       	push	r29
  d8:	cf 93       	push	r28
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
	// duty cycle is the value in the main (steps I want make and get the ratio from 0 to 255)
	//OCR0A = (dutyCycle/100.0)*255;
	// keeps info/counting  of number of overflows for me
	//overflowCounter++;
}
  de:	cf 91       	pop	r28
  e0:	df 91       	pop	r29
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
